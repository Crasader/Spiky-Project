// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameInitialState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInitialState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPosition_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPosition_Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPosition_Rotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPosition_Rotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shot_reflection_ = NULL;
struct ShotOneofInstance {
  bool result_hitstate_;
}* Shot_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Shot_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shot_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shot_End_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shot_End_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameModels_2eproto() {
  protobuf_AddDesc_GameModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameModels.proto");
  GOOGLE_CHECK(file != NULL);
  GameInitialState_descriptor_ = file->message_type(0);
  static const int GameInitialState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitialState, startgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitialState, player_),
  };
  GameInitialState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameInitialState_descriptor_,
      GameInitialState::default_instance_,
      GameInitialState_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameInitialState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitialState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInitialState, _is_default_instance_));
  Player_descriptor_ = file->message_type(1);
  static const int Player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, playerposition_),
  };
  Player_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      -1,
      -1,
      -1,
      sizeof(Player),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _is_default_instance_));
  PlayerPosition_descriptor_ = file->message_type(2);
  static const int PlayerPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition, timestamp_),
  };
  PlayerPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerPosition_descriptor_,
      PlayerPosition::default_instance_,
      PlayerPosition_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition, _is_default_instance_));
  PlayerPosition_Location_descriptor_ = PlayerPosition_descriptor_->nested_type(0);
  static const int PlayerPosition_Location_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Location, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Location, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Location, z_),
  };
  PlayerPosition_Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerPosition_Location_descriptor_,
      PlayerPosition_Location::default_instance_,
      PlayerPosition_Location_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerPosition_Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Location, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Location, _is_default_instance_));
  PlayerPosition_Rotation_descriptor_ = PlayerPosition_descriptor_->nested_type(1);
  static const int PlayerPosition_Rotation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Rotation, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Rotation, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Rotation, yaw_),
  };
  PlayerPosition_Rotation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerPosition_Rotation_descriptor_,
      PlayerPosition_Rotation::default_instance_,
      PlayerPosition_Rotation_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerPosition_Rotation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Rotation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosition_Rotation, _is_default_instance_));
  Ping_descriptor_ = file->message_type(3);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, time_),
  };
  Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _is_default_instance_));
  Shot_descriptor_ = file->message_type(4);
  static const int Shot_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, playerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, requestfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, requestto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, roomowner_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Shot_default_oneof_instance_, result_hitstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, result_bonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, v1_),
  };
  Shot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Shot_descriptor_,
      Shot::default_instance_,
      Shot_offsets_,
      -1,
      -1,
      -1,
      Shot_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, _oneof_case_[0]),
      sizeof(Shot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot, _is_default_instance_));
  Shot_Start_descriptor_ = Shot_descriptor_->nested_type(0);
  static const int Shot_Start_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_Start, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_Start, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_Start, z_),
  };
  Shot_Start_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Shot_Start_descriptor_,
      Shot_Start::default_instance_,
      Shot_Start_offsets_,
      -1,
      -1,
      -1,
      sizeof(Shot_Start),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_Start, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_Start, _is_default_instance_));
  Shot_End_descriptor_ = Shot_descriptor_->nested_type(1);
  static const int Shot_End_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_End, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_End, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_End, z_),
  };
  Shot_End_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Shot_End_descriptor_,
      Shot_End::default_instance_,
      Shot_End_offsets_,
      -1,
      -1,
      -1,
      sizeof(Shot_End),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_End, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shot_End, _is_default_instance_));
  GameData_descriptor_ = file->message_type(5);
  static const int GameData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, gameinitialstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, playerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, shot_),
  };
  GameData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameData_descriptor_,
      GameData::default_instance_,
      GameData_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameInitialState_descriptor_, &GameInitialState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerPosition_descriptor_, &PlayerPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerPosition_Location_descriptor_, &PlayerPosition_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerPosition_Rotation_descriptor_, &PlayerPosition_Rotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Shot_descriptor_, &Shot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Shot_Start_descriptor_, &Shot_Start::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Shot_End_descriptor_, &Shot_End::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameData_descriptor_, &GameData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameModels_2eproto() {
  delete GameInitialState::default_instance_;
  delete GameInitialState_reflection_;
  delete Player::default_instance_;
  delete Player_reflection_;
  delete PlayerPosition::default_instance_;
  delete PlayerPosition_reflection_;
  delete PlayerPosition_Location::default_instance_;
  delete PlayerPosition_Location_reflection_;
  delete PlayerPosition_Rotation::default_instance_;
  delete PlayerPosition_Rotation_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete Shot::default_instance_;
  delete Shot_default_oneof_instance_;
  delete Shot_reflection_;
  delete Shot_Start::default_instance_;
  delete Shot_Start_reflection_;
  delete Shot_End::default_instance_;
  delete Shot_End_reflection_;
  delete GameData::default_instance_;
  delete GameData_reflection_;
}

void protobuf_AddDesc_GameModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GameModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DisableWarnings_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameModels.proto\032\025DisableWarnings.prot"
    "o\">\n\020GameInitialState\022\021\n\tstartGame\030\001 \001(\010"
    "\022\027\n\006player\030\002 \003(\0132\007.Player\"d\n\006Player\022\023\n\013p"
    "layer_name\030\001 \001(\t\022\014\n\004team\030\002 \001(\t\022\016\n\006health"
    "\030\003 \001(\005\022\'\n\016playerPosition\030\004 \001(\0132\017.PlayerP"
    "osition\"\350\001\n\016PlayerPosition\022%\n\003loc\030\001 \001(\0132"
    "\030.PlayerPosition.Location\022%\n\003rot\030\002 \001(\0132\030"
    ".PlayerPosition.Rotation\022\022\n\nplayerName\030\003"
    " \001(\t\022\021\n\ttimeStamp\030\004 \001(\003\032+\n\010Location\022\t\n\001X"
    "\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\t\n\001Z\030\003 \001(\005\0324\n\010Rotation"
    "\022\r\n\005Pitch\030\001 \001(\005\022\014\n\004Roll\030\002 \001(\005\022\013\n\003Yaw\030\003 \001"
    "(\005\"\024\n\004Ping\022\014\n\004time\030\001 \001(\003\"\275\002\n\004Shot\022\032\n\005sta"
    "rt\030\001 \001(\0132\013.Shot.Start\022\026\n\003end\030\002 \001(\0132\t.Sho"
    "t.End\022\'\n\016playerPosition\030\003 \001(\0132\017.PlayerPo"
    "sition\022\021\n\ttimeStamp\030\004 \001(\003\022\023\n\013requestFrom"
    "\030\005 \001(\t\022\021\n\trequestTo\030\006 \001(\t\022\021\n\troomOwner\030\007"
    " \001(\t\022\031\n\017result_hitState\030\010 \001(\010H\000\022\027\n\017resul"
    "t_bonename\030\t \001(\t\032(\n\005Start\022\t\n\001X\030\001 \001(\005\022\t\n\001"
    "Y\030\002 \001(\005\022\t\n\001Z\030\003 \001(\005\032&\n\003End\022\t\n\001X\030\001 \001(\005\022\t\n\001"
    "Y\030\002 \001(\005\022\t\n\001Z\030\003 \001(\005B\004\n\002v1\"\212\001\n\010GameData\022+\n"
    "\020gameInitialState\030\001 \001(\0132\021.GameInitialSta"
    "te\022\'\n\016playerPosition\030\002 \001(\0132\017.PlayerPosit"
    "ion\022\023\n\004ping\030\003 \001(\0132\005.Ping\022\023\n\004shot\030\004 \001(\0132\005"
    ".ShotB*\n\034com.spiky.server.protomodelsB\nG"
    "ameModelsb\006proto3", 977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameModels.proto", &protobuf_RegisterTypes);
  GameInitialState::default_instance_ = new GameInitialState();
  Player::default_instance_ = new Player();
  PlayerPosition::default_instance_ = new PlayerPosition();
  PlayerPosition_Location::default_instance_ = new PlayerPosition_Location();
  PlayerPosition_Rotation::default_instance_ = new PlayerPosition_Rotation();
  Ping::default_instance_ = new Ping();
  Shot::default_instance_ = new Shot();
  Shot_default_oneof_instance_ = new ShotOneofInstance();
  Shot_Start::default_instance_ = new Shot_Start();
  Shot_End::default_instance_ = new Shot_End();
  GameData::default_instance_ = new GameData();
  GameInitialState::default_instance_->InitAsDefaultInstance();
  Player::default_instance_->InitAsDefaultInstance();
  PlayerPosition::default_instance_->InitAsDefaultInstance();
  PlayerPosition_Location::default_instance_->InitAsDefaultInstance();
  PlayerPosition_Rotation::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Shot::default_instance_->InitAsDefaultInstance();
  Shot_Start::default_instance_->InitAsDefaultInstance();
  Shot_End::default_instance_->InitAsDefaultInstance();
  GameData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameModels_2eproto {
  StaticDescriptorInitializer_GameModels_2eproto() {
    protobuf_AddDesc_GameModels_2eproto();
  }
} static_descriptor_initializer_GameModels_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInitialState::kStartGameFieldNumber;
const int GameInitialState::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInitialState::GameInitialState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameInitialState)
}

void GameInitialState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameInitialState::GameInitialState(const GameInitialState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameInitialState)
}

void GameInitialState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  startgame_ = false;
}

GameInitialState::~GameInitialState() {
  // @@protoc_insertion_point(destructor:GameInitialState)
  SharedDtor();
}

void GameInitialState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInitialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInitialState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInitialState_descriptor_;
}

const GameInitialState& GameInitialState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

GameInitialState* GameInitialState::default_instance_ = NULL;

GameInitialState* GameInitialState::New(::google::protobuf::Arena* arena) const {
  GameInitialState* n = new GameInitialState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInitialState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameInitialState)
  startgame_ = false;
  player_.Clear();
}

bool GameInitialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameInitialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool startGame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startgame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // repeated .Player player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_player;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameInitialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameInitialState)
  return false;
#undef DO_
}

void GameInitialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameInitialState)
  // optional bool startGame = 1;
  if (this->startgame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->startgame(), output);
  }

  // repeated .Player player = 2;
  for (unsigned int i = 0, n = this->player_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GameInitialState)
}

::google::protobuf::uint8* GameInitialState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameInitialState)
  // optional bool startGame = 1;
  if (this->startgame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->startgame(), target);
  }

  // repeated .Player player = 2;
  for (unsigned int i = 0, n = this->player_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->player(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameInitialState)
  return target;
}

int GameInitialState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameInitialState)
  int total_size = 0;

  // optional bool startGame = 1;
  if (this->startgame() != 0) {
    total_size += 1 + 1;
  }

  // repeated .Player player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInitialState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameInitialState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameInitialState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInitialState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameInitialState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameInitialState)
    MergeFrom(*source);
  }
}

void GameInitialState::MergeFrom(const GameInitialState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameInitialState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  player_.MergeFrom(from.player_);
  if (from.startgame() != 0) {
    set_startgame(from.startgame());
  }
}

void GameInitialState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameInitialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInitialState::CopyFrom(const GameInitialState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameInitialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInitialState::IsInitialized() const {

  return true;
}

void GameInitialState::Swap(GameInitialState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInitialState::InternalSwap(GameInitialState* other) {
  std::swap(startgame_, other->startgame_);
  player_.UnsafeArenaSwap(&other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInitialState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInitialState_descriptor_;
  metadata.reflection = GameInitialState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInitialState

// optional bool startGame = 1;
void GameInitialState::clear_startgame() {
  startgame_ = false;
}
 bool GameInitialState::startgame() const {
  // @@protoc_insertion_point(field_get:GameInitialState.startGame)
  return startgame_;
}
 void GameInitialState::set_startgame(bool value) {
  
  startgame_ = value;
  // @@protoc_insertion_point(field_set:GameInitialState.startGame)
}

// repeated .Player player = 2;
int GameInitialState::player_size() const {
  return player_.size();
}
void GameInitialState::clear_player() {
  player_.Clear();
}
const ::Player& GameInitialState::player(int index) const {
  // @@protoc_insertion_point(field_get:GameInitialState.player)
  return player_.Get(index);
}
::Player* GameInitialState::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:GameInitialState.player)
  return player_.Mutable(index);
}
::Player* GameInitialState::add_player() {
  // @@protoc_insertion_point(field_add:GameInitialState.player)
  return player_.Add();
}
::google::protobuf::RepeatedPtrField< ::Player >*
GameInitialState::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:GameInitialState.player)
  return &player_;
}
const ::google::protobuf::RepeatedPtrField< ::Player >&
GameInitialState::player() const {
  // @@protoc_insertion_point(field_list:GameInitialState.player)
  return player_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kPlayerNameFieldNumber;
const int Player::kTeamFieldNumber;
const int Player::kHealthFieldNumber;
const int Player::kPlayerPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player)
}

void Player::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  playerposition_ = const_cast< ::PlayerPosition*>(&::PlayerPosition::default_instance());
}

Player::Player(const Player& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Player)
}

void Player::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_ = 0;
  playerposition_ = NULL;
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:Player)
  SharedDtor();
}

void Player::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete playerposition_;
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:Player)
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_ = 0;
  if (GetArenaNoVirtual() == NULL && playerposition_ != NULL) delete playerposition_;
  playerposition_ = NULL;
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Player.player_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional string team = 2;
      case 2: {
        if (tag == 18) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Player.team"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_health;
        break;
      }

      // optional int32 health = 3;
      case 3: {
        if (tag == 24) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerPosition;
        break;
      }

      // optional .PlayerPosition playerPosition = 4;
      case 4: {
        if (tag == 34) {
         parse_playerPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player)
  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Player.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_name(), output);
  }

  // optional string team = 2;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Player.team");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team(), output);
  }

  // optional int32 health = 3;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health(), output);
  }

  // optional .PlayerPosition playerPosition = 4;
  if (this->has_playerposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->playerposition_, output);
  }

  // @@protoc_insertion_point(serialize_end:Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player)
  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Player.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // optional string team = 2;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Player.team");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team(), target);
  }

  // optional int32 health = 3;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health(), target);
  }

  // optional .PlayerPosition playerPosition = 4;
  if (this->has_playerposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->playerposition_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Player)
  return target;
}

int Player::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Player)
  int total_size = 0;

  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  // optional string team = 2;
  if (this->team().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team());
  }

  // optional int32 health = 3;
  if (this->health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health());
  }

  // optional .PlayerPosition playerPosition = 4;
  if (this->has_playerposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerposition_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Player)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Player* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.team().size() > 0) {

    team_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_);
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
  if (from.has_playerposition()) {
    mutable_playerposition()->::PlayerPosition::MergeFrom(from.playerposition());
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {

  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  player_name_.Swap(&other->player_name_);
  team_.Swap(&other->team_);
  std::swap(health_, other->health_);
  std::swap(playerposition_, other->playerposition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// optional string player_name = 1;
void Player::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Player::player_name() const {
  // @@protoc_insertion_point(field_get:Player.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Player.player_name)
}
 void Player::set_player_name(const char* value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Player.player_name)
}
 void Player::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Player.player_name)
}
 ::std::string* Player::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:Player.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Player::release_player_name() {
  // @@protoc_insertion_point(field_release:Player.player_name)
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:Player.player_name)
}

// optional string team = 2;
void Player::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Player::team() const {
  // @@protoc_insertion_point(field_get:Player.team)
  return team_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_team(const ::std::string& value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Player.team)
}
 void Player::set_team(const char* value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Player.team)
}
 void Player::set_team(const char* value, size_t size) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Player.team)
}
 ::std::string* Player::mutable_team() {
  
  // @@protoc_insertion_point(field_mutable:Player.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Player::release_team() {
  // @@protoc_insertion_point(field_release:Player.team)
  
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    
  } else {
    
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:Player.team)
}

// optional int32 health = 3;
void Player::clear_health() {
  health_ = 0;
}
 ::google::protobuf::int32 Player::health() const {
  // @@protoc_insertion_point(field_get:Player.health)
  return health_;
}
 void Player::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:Player.health)
}

// optional .PlayerPosition playerPosition = 4;
bool Player::has_playerposition() const {
  return !_is_default_instance_ && playerposition_ != NULL;
}
void Player::clear_playerposition() {
  if (GetArenaNoVirtual() == NULL && playerposition_ != NULL) delete playerposition_;
  playerposition_ = NULL;
}
const ::PlayerPosition& Player::playerposition() const {
  // @@protoc_insertion_point(field_get:Player.playerPosition)
  return playerposition_ != NULL ? *playerposition_ : *default_instance_->playerposition_;
}
::PlayerPosition* Player::mutable_playerposition() {
  
  if (playerposition_ == NULL) {
    playerposition_ = new ::PlayerPosition;
  }
  // @@protoc_insertion_point(field_mutable:Player.playerPosition)
  return playerposition_;
}
::PlayerPosition* Player::release_playerposition() {
  // @@protoc_insertion_point(field_release:Player.playerPosition)
  
  ::PlayerPosition* temp = playerposition_;
  playerposition_ = NULL;
  return temp;
}
void Player::set_allocated_playerposition(::PlayerPosition* playerposition) {
  delete playerposition_;
  playerposition_ = playerposition;
  if (playerposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Player.playerPosition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPosition_Location::kXFieldNumber;
const int PlayerPosition_Location::kYFieldNumber;
const int PlayerPosition_Location::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPosition_Location::PlayerPosition_Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerPosition.Location)
}

void PlayerPosition_Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerPosition_Location::PlayerPosition_Location(const PlayerPosition_Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerPosition.Location)
}

void PlayerPosition_Location::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

PlayerPosition_Location::~PlayerPosition_Location() {
  // @@protoc_insertion_point(destructor:PlayerPosition.Location)
  SharedDtor();
}

void PlayerPosition_Location::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPosition_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPosition_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPosition_Location_descriptor_;
}

const PlayerPosition_Location& PlayerPosition_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

PlayerPosition_Location* PlayerPosition_Location::default_instance_ = NULL;

PlayerPosition_Location* PlayerPosition_Location::New(::google::protobuf::Arena* arena) const {
  PlayerPosition_Location* n = new PlayerPosition_Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerPosition_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerPosition.Location)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerPosition_Location, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerPosition_Location*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerPosition_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerPosition.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Z;
        break;
      }

      // optional int32 Z = 3;
      case 3: {
        if (tag == 24) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerPosition.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerPosition.Location)
  return false;
#undef DO_
}

void PlayerPosition_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerPosition.Location)
  // optional int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlayerPosition.Location)
}

::google::protobuf::uint8* PlayerPosition_Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerPosition.Location)
  // optional int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlayerPosition.Location)
  return target;
}

int PlayerPosition_Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerPosition.Location)
  int total_size = 0;

  // optional int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPosition_Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerPosition.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerPosition_Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerPosition_Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerPosition.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerPosition.Location)
    MergeFrom(*source);
  }
}

void PlayerPosition_Location::MergeFrom(const PlayerPosition_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerPosition.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void PlayerPosition_Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerPosition.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPosition_Location::CopyFrom(const PlayerPosition_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerPosition.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPosition_Location::IsInitialized() const {

  return true;
}

void PlayerPosition_Location::Swap(PlayerPosition_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPosition_Location::InternalSwap(PlayerPosition_Location* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerPosition_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPosition_Location_descriptor_;
  metadata.reflection = PlayerPosition_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPosition_Rotation::kPitchFieldNumber;
const int PlayerPosition_Rotation::kRollFieldNumber;
const int PlayerPosition_Rotation::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPosition_Rotation::PlayerPosition_Rotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerPosition.Rotation)
}

void PlayerPosition_Rotation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayerPosition_Rotation::PlayerPosition_Rotation(const PlayerPosition_Rotation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerPosition.Rotation)
}

void PlayerPosition_Rotation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pitch_ = 0;
  roll_ = 0;
  yaw_ = 0;
}

PlayerPosition_Rotation::~PlayerPosition_Rotation() {
  // @@protoc_insertion_point(destructor:PlayerPosition.Rotation)
  SharedDtor();
}

void PlayerPosition_Rotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPosition_Rotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPosition_Rotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPosition_Rotation_descriptor_;
}

const PlayerPosition_Rotation& PlayerPosition_Rotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

PlayerPosition_Rotation* PlayerPosition_Rotation::default_instance_ = NULL;

PlayerPosition_Rotation* PlayerPosition_Rotation::New(::google::protobuf::Arena* arena) const {
  PlayerPosition_Rotation* n = new PlayerPosition_Rotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerPosition_Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerPosition.Rotation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerPosition_Rotation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerPosition_Rotation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pitch_, yaw_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerPosition_Rotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerPosition.Rotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Pitch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Roll;
        break;
      }

      // optional int32 Roll = 2;
      case 2: {
        if (tag == 16) {
         parse_Roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Yaw;
        break;
      }

      // optional int32 Yaw = 3;
      case 3: {
        if (tag == 24) {
         parse_Yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yaw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerPosition.Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerPosition.Rotation)
  return false;
#undef DO_
}

void PlayerPosition_Rotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerPosition.Rotation)
  // optional int32 Pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pitch(), output);
  }

  // optional int32 Roll = 2;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roll(), output);
  }

  // optional int32 Yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yaw(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlayerPosition.Rotation)
}

::google::protobuf::uint8* PlayerPosition_Rotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerPosition.Rotation)
  // optional int32 Pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pitch(), target);
  }

  // optional int32 Roll = 2;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roll(), target);
  }

  // optional int32 Yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yaw(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlayerPosition.Rotation)
  return target;
}

int PlayerPosition_Rotation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerPosition.Rotation)
  int total_size = 0;

  // optional int32 Pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pitch());
  }

  // optional int32 Roll = 2;
  if (this->roll() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roll());
  }

  // optional int32 Yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yaw());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPosition_Rotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerPosition.Rotation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerPosition_Rotation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerPosition_Rotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerPosition.Rotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerPosition.Rotation)
    MergeFrom(*source);
  }
}

void PlayerPosition_Rotation::MergeFrom(const PlayerPosition_Rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerPosition.Rotation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void PlayerPosition_Rotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerPosition.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPosition_Rotation::CopyFrom(const PlayerPosition_Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerPosition.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPosition_Rotation::IsInitialized() const {

  return true;
}

void PlayerPosition_Rotation::Swap(PlayerPosition_Rotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPosition_Rotation::InternalSwap(PlayerPosition_Rotation* other) {
  std::swap(pitch_, other->pitch_);
  std::swap(roll_, other->roll_);
  std::swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerPosition_Rotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPosition_Rotation_descriptor_;
  metadata.reflection = PlayerPosition_Rotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPosition::kLocFieldNumber;
const int PlayerPosition::kRotFieldNumber;
const int PlayerPosition::kPlayerNameFieldNumber;
const int PlayerPosition::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPosition::PlayerPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerPosition)
}

void PlayerPosition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  loc_ = const_cast< ::PlayerPosition_Location*>(&::PlayerPosition_Location::default_instance());
  rot_ = const_cast< ::PlayerPosition_Rotation*>(&::PlayerPosition_Rotation::default_instance());
}

PlayerPosition::PlayerPosition(const PlayerPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerPosition)
}

void PlayerPosition::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loc_ = NULL;
  rot_ = NULL;
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

PlayerPosition::~PlayerPosition() {
  // @@protoc_insertion_point(destructor:PlayerPosition)
  SharedDtor();
}

void PlayerPosition::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete loc_;
    delete rot_;
  }
}

void PlayerPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPosition_descriptor_;
}

const PlayerPosition& PlayerPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

PlayerPosition* PlayerPosition::default_instance_ = NULL;

PlayerPosition* PlayerPosition::New(::google::protobuf::Arena* arena) const {
  PlayerPosition* n = new PlayerPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerPosition)
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) delete loc_;
  loc_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool PlayerPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerPosition.Location loc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rot;
        break;
      }

      // optional .PlayerPosition.Rotation rot = 2;
      case 2: {
        if (tag == 18) {
         parse_rot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlayerPosition.playerName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerPosition)
  return false;
#undef DO_
}

void PlayerPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerPosition)
  // optional .PlayerPosition.Location loc = 1;
  if (this->has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->loc_, output);
  }

  // optional .PlayerPosition.Rotation rot = 2;
  if (this->has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rot_, output);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlayerPosition.playerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional int64 timeStamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlayerPosition)
}

::google::protobuf::uint8* PlayerPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerPosition)
  // optional .PlayerPosition.Location loc = 1;
  if (this->has_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->loc_, false, target);
  }

  // optional .PlayerPosition.Rotation rot = 2;
  if (this->has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rot_, false, target);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlayerPosition.playerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional int64 timeStamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlayerPosition)
  return target;
}

int PlayerPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerPosition)
  int total_size = 0;

  // optional .PlayerPosition.Location loc = 1;
  if (this->has_loc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loc_);
  }

  // optional .PlayerPosition.Rotation rot = 2;
  if (this->has_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  // optional string playerName = 3;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  // optional int64 timeStamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerPosition)
    MergeFrom(*source);
  }
}

void PlayerPosition::MergeFrom(const PlayerPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_loc()) {
    mutable_loc()->::PlayerPosition_Location::MergeFrom(from.loc());
  }
  if (from.has_rot()) {
    mutable_rot()->::PlayerPosition_Rotation::MergeFrom(from.rot());
  }
  if (from.playername().size() > 0) {

    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void PlayerPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPosition::CopyFrom(const PlayerPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPosition::IsInitialized() const {

  return true;
}

void PlayerPosition::Swap(PlayerPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPosition::InternalSwap(PlayerPosition* other) {
  std::swap(loc_, other->loc_);
  std::swap(rot_, other->rot_);
  playername_.Swap(&other->playername_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPosition_descriptor_;
  metadata.reflection = PlayerPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerPosition_Location

// optional int32 X = 1;
void PlayerPosition_Location::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 PlayerPosition_Location::x() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Location.X)
  return x_;
}
 void PlayerPosition_Location::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.Location.X)
}

// optional int32 Y = 2;
void PlayerPosition_Location::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 PlayerPosition_Location::y() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Location.Y)
  return y_;
}
 void PlayerPosition_Location::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.Location.Y)
}

// optional int32 Z = 3;
void PlayerPosition_Location::clear_z() {
  z_ = 0;
}
 ::google::protobuf::int32 PlayerPosition_Location::z() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Location.Z)
  return z_;
}
 void PlayerPosition_Location::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.Location.Z)
}

// -------------------------------------------------------------------

// PlayerPosition_Rotation

// optional int32 Pitch = 1;
void PlayerPosition_Rotation::clear_pitch() {
  pitch_ = 0;
}
 ::google::protobuf::int32 PlayerPosition_Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Rotation.Pitch)
  return pitch_;
}
 void PlayerPosition_Rotation::set_pitch(::google::protobuf::int32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.Rotation.Pitch)
}

// optional int32 Roll = 2;
void PlayerPosition_Rotation::clear_roll() {
  roll_ = 0;
}
 ::google::protobuf::int32 PlayerPosition_Rotation::roll() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Rotation.Roll)
  return roll_;
}
 void PlayerPosition_Rotation::set_roll(::google::protobuf::int32 value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.Rotation.Roll)
}

// optional int32 Yaw = 3;
void PlayerPosition_Rotation::clear_yaw() {
  yaw_ = 0;
}
 ::google::protobuf::int32 PlayerPosition_Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.Rotation.Yaw)
  return yaw_;
}
 void PlayerPosition_Rotation::set_yaw(::google::protobuf::int32 value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.Rotation.Yaw)
}

// -------------------------------------------------------------------

// PlayerPosition

// optional .PlayerPosition.Location loc = 1;
bool PlayerPosition::has_loc() const {
  return !_is_default_instance_ && loc_ != NULL;
}
void PlayerPosition::clear_loc() {
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) delete loc_;
  loc_ = NULL;
}
const ::PlayerPosition_Location& PlayerPosition::loc() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.loc)
  return loc_ != NULL ? *loc_ : *default_instance_->loc_;
}
::PlayerPosition_Location* PlayerPosition::mutable_loc() {
  
  if (loc_ == NULL) {
    loc_ = new ::PlayerPosition_Location;
  }
  // @@protoc_insertion_point(field_mutable:PlayerPosition.loc)
  return loc_;
}
::PlayerPosition_Location* PlayerPosition::release_loc() {
  // @@protoc_insertion_point(field_release:PlayerPosition.loc)
  
  ::PlayerPosition_Location* temp = loc_;
  loc_ = NULL;
  return temp;
}
void PlayerPosition::set_allocated_loc(::PlayerPosition_Location* loc) {
  delete loc_;
  loc_ = loc;
  if (loc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerPosition.loc)
}

// optional .PlayerPosition.Rotation rot = 2;
bool PlayerPosition::has_rot() const {
  return !_is_default_instance_ && rot_ != NULL;
}
void PlayerPosition::clear_rot() {
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}
const ::PlayerPosition_Rotation& PlayerPosition::rot() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.rot)
  return rot_ != NULL ? *rot_ : *default_instance_->rot_;
}
::PlayerPosition_Rotation* PlayerPosition::mutable_rot() {
  
  if (rot_ == NULL) {
    rot_ = new ::PlayerPosition_Rotation;
  }
  // @@protoc_insertion_point(field_mutable:PlayerPosition.rot)
  return rot_;
}
::PlayerPosition_Rotation* PlayerPosition::release_rot() {
  // @@protoc_insertion_point(field_release:PlayerPosition.rot)
  
  ::PlayerPosition_Rotation* temp = rot_;
  rot_ = NULL;
  return temp;
}
void PlayerPosition::set_allocated_rot(::PlayerPosition_Rotation* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerPosition.rot)
}

// optional string playerName = 3;
void PlayerPosition::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlayerPosition::playername() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.playerName)
  return playername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerPosition::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerPosition.playerName)
}
 void PlayerPosition::set_playername(const char* value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerPosition.playerName)
}
 void PlayerPosition::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerPosition.playerName)
}
 ::std::string* PlayerPosition::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:PlayerPosition.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerPosition::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerPosition.playerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerPosition::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:PlayerPosition.playerName)
}

// optional int64 timeStamp = 4;
void PlayerPosition::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 PlayerPosition::timestamp() const {
  // @@protoc_insertion_point(field_get:PlayerPosition.timeStamp)
  return timestamp_;
}
 void PlayerPosition::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PlayerPosition.timeStamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ping)
}

void Ping::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ping)
}

void Ping::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Ping)
  time_ = GOOGLE_LONGLONG(0);
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ping)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

int Ping::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Ping)
  int total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ping* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional int64 time = 1;
void Ping::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Ping::time() const {
  // @@protoc_insertion_point(field_get:Ping.time)
  return time_;
}
 void Ping::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Ping.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shot_Start::kXFieldNumber;
const int Shot_Start::kYFieldNumber;
const int Shot_Start::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shot_Start::Shot_Start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shot.Start)
}

void Shot_Start::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Shot_Start::Shot_Start(const Shot_Start& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shot.Start)
}

void Shot_Start::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Shot_Start::~Shot_Start() {
  // @@protoc_insertion_point(destructor:Shot.Start)
  SharedDtor();
}

void Shot_Start::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shot_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shot_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shot_Start_descriptor_;
}

const Shot_Start& Shot_Start::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

Shot_Start* Shot_Start::default_instance_ = NULL;

Shot_Start* Shot_Start::New(::google::protobuf::Arena* arena) const {
  Shot_Start* n = new Shot_Start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shot_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:Shot.Start)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Shot_Start, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Shot_Start*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Shot_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shot.Start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Z;
        break;
      }

      // optional int32 Z = 3;
      case 3: {
        if (tag == 24) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shot.Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shot.Start)
  return false;
#undef DO_
}

void Shot_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shot.Start)
  // optional int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Shot.Start)
}

::google::protobuf::uint8* Shot_Start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shot.Start)
  // optional int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Shot.Start)
  return target;
}

int Shot_Start::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Shot.Start)
  int total_size = 0;

  // optional int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shot_Start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Shot.Start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Shot_Start* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Shot_Start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Shot.Start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Shot.Start)
    MergeFrom(*source);
  }
}

void Shot_Start::MergeFrom(const Shot_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Shot.Start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Shot_Start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Shot.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shot_Start::CopyFrom(const Shot_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shot.Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shot_Start::IsInitialized() const {

  return true;
}

void Shot_Start::Swap(Shot_Start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shot_Start::InternalSwap(Shot_Start* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shot_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shot_Start_descriptor_;
  metadata.reflection = Shot_Start_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shot_End::kXFieldNumber;
const int Shot_End::kYFieldNumber;
const int Shot_End::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shot_End::Shot_End()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shot.End)
}

void Shot_End::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Shot_End::Shot_End(const Shot_End& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shot.End)
}

void Shot_End::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Shot_End::~Shot_End() {
  // @@protoc_insertion_point(destructor:Shot.End)
  SharedDtor();
}

void Shot_End::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shot_End::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shot_End::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shot_End_descriptor_;
}

const Shot_End& Shot_End::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

Shot_End* Shot_End::default_instance_ = NULL;

Shot_End* Shot_End::New(::google::protobuf::Arena* arena) const {
  Shot_End* n = new Shot_End;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shot_End::Clear() {
// @@protoc_insertion_point(message_clear_start:Shot.End)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Shot_End, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Shot_End*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Shot_End::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shot.End)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Z;
        break;
      }

      // optional int32 Z = 3;
      case 3: {
        if (tag == 24) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shot.End)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shot.End)
  return false;
#undef DO_
}

void Shot_End::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shot.End)
  // optional int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Shot.End)
}

::google::protobuf::uint8* Shot_End::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shot.End)
  // optional int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Shot.End)
  return target;
}

int Shot_End::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Shot.End)
  int total_size = 0;

  // optional int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 Z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shot_End::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Shot.End)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Shot_End* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Shot_End>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Shot.End)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Shot.End)
    MergeFrom(*source);
  }
}

void Shot_End::MergeFrom(const Shot_End& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Shot.End)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Shot_End::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Shot.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shot_End::CopyFrom(const Shot_End& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shot.End)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shot_End::IsInitialized() const {

  return true;
}

void Shot_End::Swap(Shot_End* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shot_End::InternalSwap(Shot_End* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shot_End::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shot_End_descriptor_;
  metadata.reflection = Shot_End_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shot::kStartFieldNumber;
const int Shot::kEndFieldNumber;
const int Shot::kPlayerPositionFieldNumber;
const int Shot::kTimeStampFieldNumber;
const int Shot::kRequestFromFieldNumber;
const int Shot::kRequestToFieldNumber;
const int Shot::kRoomOwnerFieldNumber;
const int Shot::kResultHitStateFieldNumber;
const int Shot::kResultBonenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shot::Shot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shot)
}

void Shot::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  start_ = const_cast< ::Shot_Start*>(&::Shot_Start::default_instance());
  end_ = const_cast< ::Shot_End*>(&::Shot_End::default_instance());
  playerposition_ = const_cast< ::PlayerPosition*>(&::PlayerPosition::default_instance());
  Shot_default_oneof_instance_->result_hitstate_ = false;
}

Shot::Shot(const Shot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shot)
}

void Shot::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  playerposition_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  requestfrom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomowner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_bonename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

Shot::~Shot() {
  // @@protoc_insertion_point(destructor:Shot)
  SharedDtor();
}

void Shot::SharedDtor() {
  requestfrom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomowner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_bonename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
  if (this != default_instance_) {
    delete start_;
    delete end_;
    delete playerposition_;
  }
}

void Shot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shot_descriptor_;
}

const Shot& Shot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

Shot* Shot::default_instance_ = NULL;

Shot* Shot::New(::google::protobuf::Arena* arena) const {
  Shot* n = new Shot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shot::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:Shot)
  switch(v1_case()) {
    case kResultHitState: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void Shot::Clear() {
// @@protoc_insertion_point(message_clear_start:Shot)
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerposition_ != NULL) delete playerposition_;
  playerposition_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  requestfrom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_bonename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_v1();
}

bool Shot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Shot.Start start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .Shot.End end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerPosition;
        break;
      }

      // optional .PlayerPosition playerPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_playerPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_requestFrom;
        break;
      }

      // optional string requestFrom = 5;
      case 5: {
        if (tag == 42) {
         parse_requestFrom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestfrom()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requestfrom().data(), this->requestfrom().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shot.requestFrom"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_requestTo;
        break;
      }

      // optional string requestTo = 6;
      case 6: {
        if (tag == 50) {
         parse_requestTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requestto().data(), this->requestto().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shot.requestTo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_roomOwner;
        break;
      }

      // optional string roomOwner = 7;
      case 7: {
        if (tag == 58) {
         parse_roomOwner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomowner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomowner().data(), this->roomowner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shot.roomOwner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_result_hitState;
        break;
      }

      // optional bool result_hitState = 8;
      case 8: {
        if (tag == 64) {
         parse_result_hitState:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v1_.result_hitstate_)));
          set_has_result_hitstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_result_bonename;
        break;
      }

      // optional string result_bonename = 9;
      case 9: {
        if (tag == 74) {
         parse_result_bonename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_bonename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_bonename().data(), this->result_bonename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shot.result_bonename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shot)
  return false;
#undef DO_
}

void Shot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shot)
  // optional .Shot.Start start = 1;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // optional .Shot.End end = 2;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_, output);
  }

  // optional .PlayerPosition playerPosition = 3;
  if (this->has_playerposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->playerposition_, output);
  }

  // optional int64 timeStamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional string requestFrom = 5;
  if (this->requestfrom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestfrom().data(), this->requestfrom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.requestFrom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->requestfrom(), output);
  }

  // optional string requestTo = 6;
  if (this->requestto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestto().data(), this->requestto().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.requestTo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->requestto(), output);
  }

  // optional string roomOwner = 7;
  if (this->roomowner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomowner().data(), this->roomowner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.roomOwner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->roomowner(), output);
  }

  // optional bool result_hitState = 8;
  if (has_result_hitstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->result_hitstate(), output);
  }

  // optional string result_bonename = 9;
  if (this->result_bonename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_bonename().data(), this->result_bonename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.result_bonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->result_bonename(), output);
  }

  // @@protoc_insertion_point(serialize_end:Shot)
}

::google::protobuf::uint8* Shot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shot)
  // optional .Shot.Start start = 1;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_, false, target);
  }

  // optional .Shot.End end = 2;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_, false, target);
  }

  // optional .PlayerPosition playerPosition = 3;
  if (this->has_playerposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->playerposition_, false, target);
  }

  // optional int64 timeStamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional string requestFrom = 5;
  if (this->requestfrom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestfrom().data(), this->requestfrom().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.requestFrom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->requestfrom(), target);
  }

  // optional string requestTo = 6;
  if (this->requestto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestto().data(), this->requestto().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.requestTo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->requestto(), target);
  }

  // optional string roomOwner = 7;
  if (this->roomowner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomowner().data(), this->roomowner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.roomOwner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->roomowner(), target);
  }

  // optional bool result_hitState = 8;
  if (has_result_hitstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->result_hitstate(), target);
  }

  // optional string result_bonename = 9;
  if (this->result_bonename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_bonename().data(), this->result_bonename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shot.result_bonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->result_bonename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Shot)
  return target;
}

int Shot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Shot)
  int total_size = 0;

  // optional .Shot.Start start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  // optional .Shot.End end = 2;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_);
  }

  // optional .PlayerPosition playerPosition = 3;
  if (this->has_playerposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerposition_);
  }

  // optional int64 timeStamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string requestFrom = 5;
  if (this->requestfrom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestfrom());
  }

  // optional string requestTo = 6;
  if (this->requestto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestto());
  }

  // optional string roomOwner = 7;
  if (this->roomowner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomowner());
  }

  // optional string result_bonename = 9;
  if (this->result_bonename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_bonename());
  }

  switch (v1_case()) {
    // optional bool result_hitState = 8;
    case kResultHitState: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Shot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Shot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Shot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Shot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Shot)
    MergeFrom(*source);
  }
}

void Shot::MergeFrom(const Shot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Shot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.v1_case()) {
    case kResultHitState: {
      set_result_hitstate(from.result_hitstate());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (from.has_start()) {
    mutable_start()->::Shot_Start::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::Shot_End::MergeFrom(from.end());
  }
  if (from.has_playerposition()) {
    mutable_playerposition()->::PlayerPosition::MergeFrom(from.playerposition());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.requestfrom().size() > 0) {

    requestfrom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestfrom_);
  }
  if (from.requestto().size() > 0) {

    requestto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestto_);
  }
  if (from.roomowner().size() > 0) {

    roomowner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomowner_);
  }
  if (from.result_bonename().size() > 0) {

    result_bonename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_bonename_);
  }
}

void Shot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shot::CopyFrom(const Shot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shot::IsInitialized() const {

  return true;
}

void Shot::Swap(Shot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shot::InternalSwap(Shot* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(playerposition_, other->playerposition_);
  std::swap(timestamp_, other->timestamp_);
  requestfrom_.Swap(&other->requestfrom_);
  requestto_.Swap(&other->requestto_);
  roomowner_.Swap(&other->roomowner_);
  result_bonename_.Swap(&other->result_bonename_);
  std::swap(v1_, other->v1_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shot_descriptor_;
  metadata.reflection = Shot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shot_Start

// optional int32 X = 1;
void Shot_Start::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Shot_Start::x() const {
  // @@protoc_insertion_point(field_get:Shot.Start.X)
  return x_;
}
 void Shot_Start::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Shot.Start.X)
}

// optional int32 Y = 2;
void Shot_Start::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Shot_Start::y() const {
  // @@protoc_insertion_point(field_get:Shot.Start.Y)
  return y_;
}
 void Shot_Start::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Shot.Start.Y)
}

// optional int32 Z = 3;
void Shot_Start::clear_z() {
  z_ = 0;
}
 ::google::protobuf::int32 Shot_Start::z() const {
  // @@protoc_insertion_point(field_get:Shot.Start.Z)
  return z_;
}
 void Shot_Start::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Shot.Start.Z)
}

// -------------------------------------------------------------------

// Shot_End

// optional int32 X = 1;
void Shot_End::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Shot_End::x() const {
  // @@protoc_insertion_point(field_get:Shot.End.X)
  return x_;
}
 void Shot_End::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Shot.End.X)
}

// optional int32 Y = 2;
void Shot_End::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Shot_End::y() const {
  // @@protoc_insertion_point(field_get:Shot.End.Y)
  return y_;
}
 void Shot_End::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Shot.End.Y)
}

// optional int32 Z = 3;
void Shot_End::clear_z() {
  z_ = 0;
}
 ::google::protobuf::int32 Shot_End::z() const {
  // @@protoc_insertion_point(field_get:Shot.End.Z)
  return z_;
}
 void Shot_End::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Shot.End.Z)
}

// -------------------------------------------------------------------

// Shot

// optional .Shot.Start start = 1;
bool Shot::has_start() const {
  return !_is_default_instance_ && start_ != NULL;
}
void Shot::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) delete start_;
  start_ = NULL;
}
const ::Shot_Start& Shot::start() const {
  // @@protoc_insertion_point(field_get:Shot.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
::Shot_Start* Shot::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::Shot_Start;
  }
  // @@protoc_insertion_point(field_mutable:Shot.start)
  return start_;
}
::Shot_Start* Shot::release_start() {
  // @@protoc_insertion_point(field_release:Shot.start)
  
  ::Shot_Start* temp = start_;
  start_ = NULL;
  return temp;
}
void Shot::set_allocated_start(::Shot_Start* start) {
  delete start_;
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Shot.start)
}

// optional .Shot.End end = 2;
bool Shot::has_end() const {
  return !_is_default_instance_ && end_ != NULL;
}
void Shot::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) delete end_;
  end_ = NULL;
}
const ::Shot_End& Shot::end() const {
  // @@protoc_insertion_point(field_get:Shot.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
::Shot_End* Shot::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::Shot_End;
  }
  // @@protoc_insertion_point(field_mutable:Shot.end)
  return end_;
}
::Shot_End* Shot::release_end() {
  // @@protoc_insertion_point(field_release:Shot.end)
  
  ::Shot_End* temp = end_;
  end_ = NULL;
  return temp;
}
void Shot::set_allocated_end(::Shot_End* end) {
  delete end_;
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Shot.end)
}

// optional .PlayerPosition playerPosition = 3;
bool Shot::has_playerposition() const {
  return !_is_default_instance_ && playerposition_ != NULL;
}
void Shot::clear_playerposition() {
  if (GetArenaNoVirtual() == NULL && playerposition_ != NULL) delete playerposition_;
  playerposition_ = NULL;
}
const ::PlayerPosition& Shot::playerposition() const {
  // @@protoc_insertion_point(field_get:Shot.playerPosition)
  return playerposition_ != NULL ? *playerposition_ : *default_instance_->playerposition_;
}
::PlayerPosition* Shot::mutable_playerposition() {
  
  if (playerposition_ == NULL) {
    playerposition_ = new ::PlayerPosition;
  }
  // @@protoc_insertion_point(field_mutable:Shot.playerPosition)
  return playerposition_;
}
::PlayerPosition* Shot::release_playerposition() {
  // @@protoc_insertion_point(field_release:Shot.playerPosition)
  
  ::PlayerPosition* temp = playerposition_;
  playerposition_ = NULL;
  return temp;
}
void Shot::set_allocated_playerposition(::PlayerPosition* playerposition) {
  delete playerposition_;
  playerposition_ = playerposition;
  if (playerposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Shot.playerPosition)
}

// optional int64 timeStamp = 4;
void Shot::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Shot::timestamp() const {
  // @@protoc_insertion_point(field_get:Shot.timeStamp)
  return timestamp_;
}
 void Shot::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Shot.timeStamp)
}

// optional string requestFrom = 5;
void Shot::clear_requestfrom() {
  requestfrom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Shot::requestfrom() const {
  // @@protoc_insertion_point(field_get:Shot.requestFrom)
  return requestfrom_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_requestfrom(const ::std::string& value) {
  
  requestfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shot.requestFrom)
}
 void Shot::set_requestfrom(const char* value) {
  
  requestfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shot.requestFrom)
}
 void Shot::set_requestfrom(const char* value, size_t size) {
  
  requestfrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shot.requestFrom)
}
 ::std::string* Shot::mutable_requestfrom() {
  
  // @@protoc_insertion_point(field_mutable:Shot.requestFrom)
  return requestfrom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Shot::release_requestfrom() {
  // @@protoc_insertion_point(field_release:Shot.requestFrom)
  
  return requestfrom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_allocated_requestfrom(::std::string* requestfrom) {
  if (requestfrom != NULL) {
    
  } else {
    
  }
  requestfrom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestfrom);
  // @@protoc_insertion_point(field_set_allocated:Shot.requestFrom)
}

// optional string requestTo = 6;
void Shot::clear_requestto() {
  requestto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Shot::requestto() const {
  // @@protoc_insertion_point(field_get:Shot.requestTo)
  return requestto_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_requestto(const ::std::string& value) {
  
  requestto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shot.requestTo)
}
 void Shot::set_requestto(const char* value) {
  
  requestto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shot.requestTo)
}
 void Shot::set_requestto(const char* value, size_t size) {
  
  requestto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shot.requestTo)
}
 ::std::string* Shot::mutable_requestto() {
  
  // @@protoc_insertion_point(field_mutable:Shot.requestTo)
  return requestto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Shot::release_requestto() {
  // @@protoc_insertion_point(field_release:Shot.requestTo)
  
  return requestto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_allocated_requestto(::std::string* requestto) {
  if (requestto != NULL) {
    
  } else {
    
  }
  requestto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestto);
  // @@protoc_insertion_point(field_set_allocated:Shot.requestTo)
}

// optional string roomOwner = 7;
void Shot::clear_roomowner() {
  roomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Shot::roomowner() const {
  // @@protoc_insertion_point(field_get:Shot.roomOwner)
  return roomowner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_roomowner(const ::std::string& value) {
  
  roomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shot.roomOwner)
}
 void Shot::set_roomowner(const char* value) {
  
  roomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shot.roomOwner)
}
 void Shot::set_roomowner(const char* value, size_t size) {
  
  roomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shot.roomOwner)
}
 ::std::string* Shot::mutable_roomowner() {
  
  // @@protoc_insertion_point(field_mutable:Shot.roomOwner)
  return roomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Shot::release_roomowner() {
  // @@protoc_insertion_point(field_release:Shot.roomOwner)
  
  return roomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_allocated_roomowner(::std::string* roomowner) {
  if (roomowner != NULL) {
    
  } else {
    
  }
  roomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomowner);
  // @@protoc_insertion_point(field_set_allocated:Shot.roomOwner)
}

// optional bool result_hitState = 8;
bool Shot::has_result_hitstate() const {
  return v1_case() == kResultHitState;
}
void Shot::set_has_result_hitstate() {
  _oneof_case_[0] = kResultHitState;
}
void Shot::clear_result_hitstate() {
  if (has_result_hitstate()) {
    v1_.result_hitstate_ = false;
    clear_has_v1();
  }
}
 bool Shot::result_hitstate() const {
  // @@protoc_insertion_point(field_get:Shot.result_hitState)
  if (has_result_hitstate()) {
    return v1_.result_hitstate_;
  }
  return false;
}
 void Shot::set_result_hitstate(bool value) {
  if (!has_result_hitstate()) {
    clear_v1();
    set_has_result_hitstate();
  }
  v1_.result_hitstate_ = value;
  // @@protoc_insertion_point(field_set:Shot.result_hitState)
}

// optional string result_bonename = 9;
void Shot::clear_result_bonename() {
  result_bonename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Shot::result_bonename() const {
  // @@protoc_insertion_point(field_get:Shot.result_bonename)
  return result_bonename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_result_bonename(const ::std::string& value) {
  
  result_bonename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shot.result_bonename)
}
 void Shot::set_result_bonename(const char* value) {
  
  result_bonename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shot.result_bonename)
}
 void Shot::set_result_bonename(const char* value, size_t size) {
  
  result_bonename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shot.result_bonename)
}
 ::std::string* Shot::mutable_result_bonename() {
  
  // @@protoc_insertion_point(field_mutable:Shot.result_bonename)
  return result_bonename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Shot::release_result_bonename() {
  // @@protoc_insertion_point(field_release:Shot.result_bonename)
  
  return result_bonename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Shot::set_allocated_result_bonename(::std::string* result_bonename) {
  if (result_bonename != NULL) {
    
  } else {
    
  }
  result_bonename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_bonename);
  // @@protoc_insertion_point(field_set_allocated:Shot.result_bonename)
}

bool Shot::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
void Shot::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
Shot::V1Case Shot::v1_case() const {
  return Shot::V1Case(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameData::kGameInitialStateFieldNumber;
const int GameData::kPlayerPositionFieldNumber;
const int GameData::kPingFieldNumber;
const int GameData::kShotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameData::GameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameData)
}

void GameData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  gameinitialstate_ = const_cast< ::GameInitialState*>(&::GameInitialState::default_instance());
  playerposition_ = const_cast< ::PlayerPosition*>(&::PlayerPosition::default_instance());
  ping_ = const_cast< ::Ping*>(&::Ping::default_instance());
  shot_ = const_cast< ::Shot*>(&::Shot::default_instance());
}

GameData::GameData(const GameData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameData)
}

void GameData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  gameinitialstate_ = NULL;
  playerposition_ = NULL;
  ping_ = NULL;
  shot_ = NULL;
}

GameData::~GameData() {
  // @@protoc_insertion_point(destructor:GameData)
  SharedDtor();
}

void GameData::SharedDtor() {
  if (this != default_instance_) {
    delete gameinitialstate_;
    delete playerposition_;
    delete ping_;
    delete shot_;
  }
}

void GameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameData_descriptor_;
}

const GameData& GameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameModels_2eproto();
  return *default_instance_;
}

GameData* GameData::default_instance_ = NULL;

GameData* GameData::New(::google::protobuf::Arena* arena) const {
  GameData* n = new GameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameData)
  if (GetArenaNoVirtual() == NULL && gameinitialstate_ != NULL) delete gameinitialstate_;
  gameinitialstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerposition_ != NULL) delete playerposition_;
  playerposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && ping_ != NULL) delete ping_;
  ping_ = NULL;
  if (GetArenaNoVirtual() == NULL && shot_ != NULL) delete shot_;
  shot_ = NULL;
}

bool GameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameInitialState gameInitialState = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinitialstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerPosition;
        break;
      }

      // optional .PlayerPosition playerPosition = 2;
      case 2: {
        if (tag == 18) {
         parse_playerPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ping;
        break;
      }

      // optional .Ping ping = 3;
      case 3: {
        if (tag == 26) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shot;
        break;
      }

      // optional .Shot shot = 4;
      case 4: {
        if (tag == 34) {
         parse_shot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameData)
  return false;
#undef DO_
}

void GameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameData)
  // optional .GameInitialState gameInitialState = 1;
  if (this->has_gameinitialstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gameinitialstate_, output);
  }

  // optional .PlayerPosition playerPosition = 2;
  if (this->has_playerposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->playerposition_, output);
  }

  // optional .Ping ping = 3;
  if (this->has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ping_, output);
  }

  // optional .Shot shot = 4;
  if (this->has_shot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->shot_, output);
  }

  // @@protoc_insertion_point(serialize_end:GameData)
}

::google::protobuf::uint8* GameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameData)
  // optional .GameInitialState gameInitialState = 1;
  if (this->has_gameinitialstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gameinitialstate_, false, target);
  }

  // optional .PlayerPosition playerPosition = 2;
  if (this->has_playerposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->playerposition_, false, target);
  }

  // optional .Ping ping = 3;
  if (this->has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ping_, false, target);
  }

  // optional .Shot shot = 4;
  if (this->has_shot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->shot_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameData)
  return target;
}

int GameData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameData)
  int total_size = 0;

  // optional .GameInitialState gameInitialState = 1;
  if (this->has_gameinitialstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameinitialstate_);
  }

  // optional .PlayerPosition playerPosition = 2;
  if (this->has_playerposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerposition_);
  }

  // optional .Ping ping = 3;
  if (this->has_ping()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ping_);
  }

  // optional .Shot shot = 4;
  if (this->has_shot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shot_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameData)
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_gameinitialstate()) {
    mutable_gameinitialstate()->::GameInitialState::MergeFrom(from.gameinitialstate());
  }
  if (from.has_playerposition()) {
    mutable_playerposition()->::PlayerPosition::MergeFrom(from.playerposition());
  }
  if (from.has_ping()) {
    mutable_ping()->::Ping::MergeFrom(from.ping());
  }
  if (from.has_shot()) {
    mutable_shot()->::Shot::MergeFrom(from.shot());
  }
}

void GameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {

  return true;
}

void GameData::Swap(GameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameData::InternalSwap(GameData* other) {
  std::swap(gameinitialstate_, other->gameinitialstate_);
  std::swap(playerposition_, other->playerposition_);
  std::swap(ping_, other->ping_);
  std::swap(shot_, other->shot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameData_descriptor_;
  metadata.reflection = GameData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameData

// optional .GameInitialState gameInitialState = 1;
bool GameData::has_gameinitialstate() const {
  return !_is_default_instance_ && gameinitialstate_ != NULL;
}
void GameData::clear_gameinitialstate() {
  if (GetArenaNoVirtual() == NULL && gameinitialstate_ != NULL) delete gameinitialstate_;
  gameinitialstate_ = NULL;
}
const ::GameInitialState& GameData::gameinitialstate() const {
  // @@protoc_insertion_point(field_get:GameData.gameInitialState)
  return gameinitialstate_ != NULL ? *gameinitialstate_ : *default_instance_->gameinitialstate_;
}
::GameInitialState* GameData::mutable_gameinitialstate() {
  
  if (gameinitialstate_ == NULL) {
    gameinitialstate_ = new ::GameInitialState;
  }
  // @@protoc_insertion_point(field_mutable:GameData.gameInitialState)
  return gameinitialstate_;
}
::GameInitialState* GameData::release_gameinitialstate() {
  // @@protoc_insertion_point(field_release:GameData.gameInitialState)
  
  ::GameInitialState* temp = gameinitialstate_;
  gameinitialstate_ = NULL;
  return temp;
}
void GameData::set_allocated_gameinitialstate(::GameInitialState* gameinitialstate) {
  delete gameinitialstate_;
  gameinitialstate_ = gameinitialstate;
  if (gameinitialstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameData.gameInitialState)
}

// optional .PlayerPosition playerPosition = 2;
bool GameData::has_playerposition() const {
  return !_is_default_instance_ && playerposition_ != NULL;
}
void GameData::clear_playerposition() {
  if (GetArenaNoVirtual() == NULL && playerposition_ != NULL) delete playerposition_;
  playerposition_ = NULL;
}
const ::PlayerPosition& GameData::playerposition() const {
  // @@protoc_insertion_point(field_get:GameData.playerPosition)
  return playerposition_ != NULL ? *playerposition_ : *default_instance_->playerposition_;
}
::PlayerPosition* GameData::mutable_playerposition() {
  
  if (playerposition_ == NULL) {
    playerposition_ = new ::PlayerPosition;
  }
  // @@protoc_insertion_point(field_mutable:GameData.playerPosition)
  return playerposition_;
}
::PlayerPosition* GameData::release_playerposition() {
  // @@protoc_insertion_point(field_release:GameData.playerPosition)
  
  ::PlayerPosition* temp = playerposition_;
  playerposition_ = NULL;
  return temp;
}
void GameData::set_allocated_playerposition(::PlayerPosition* playerposition) {
  delete playerposition_;
  playerposition_ = playerposition;
  if (playerposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameData.playerPosition)
}

// optional .Ping ping = 3;
bool GameData::has_ping() const {
  return !_is_default_instance_ && ping_ != NULL;
}
void GameData::clear_ping() {
  if (GetArenaNoVirtual() == NULL && ping_ != NULL) delete ping_;
  ping_ = NULL;
}
const ::Ping& GameData::ping() const {
  // @@protoc_insertion_point(field_get:GameData.ping)
  return ping_ != NULL ? *ping_ : *default_instance_->ping_;
}
::Ping* GameData::mutable_ping() {
  
  if (ping_ == NULL) {
    ping_ = new ::Ping;
  }
  // @@protoc_insertion_point(field_mutable:GameData.ping)
  return ping_;
}
::Ping* GameData::release_ping() {
  // @@protoc_insertion_point(field_release:GameData.ping)
  
  ::Ping* temp = ping_;
  ping_ = NULL;
  return temp;
}
void GameData::set_allocated_ping(::Ping* ping) {
  delete ping_;
  ping_ = ping;
  if (ping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameData.ping)
}

// optional .Shot shot = 4;
bool GameData::has_shot() const {
  return !_is_default_instance_ && shot_ != NULL;
}
void GameData::clear_shot() {
  if (GetArenaNoVirtual() == NULL && shot_ != NULL) delete shot_;
  shot_ = NULL;
}
const ::Shot& GameData::shot() const {
  // @@protoc_insertion_point(field_get:GameData.shot)
  return shot_ != NULL ? *shot_ : *default_instance_->shot_;
}
::Shot* GameData::mutable_shot() {
  
  if (shot_ == NULL) {
    shot_ = new ::Shot;
  }
  // @@protoc_insertion_point(field_mutable:GameData.shot)
  return shot_;
}
::Shot* GameData::release_shot() {
  // @@protoc_insertion_point(field_release:GameData.shot)
  
  ::Shot* temp = shot_;
  shot_ = NULL;
  return temp;
}
void GameData::set_allocated_shot(::Shot* shot) {
  delete shot_;
  shot_ = shot;
  if (shot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameData.shot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
