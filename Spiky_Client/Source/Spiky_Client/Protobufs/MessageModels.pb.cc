// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CryptogramWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CryptogramWrapper_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wrapper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MessageModels_2eproto() {
  protobuf_AddDesc_MessageModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageModels.proto");
  GOOGLE_CHECK(file != NULL);
  CryptogramWrapper_descriptor_ = file->message_type(0);
  static const int CryptogramWrapper_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, registration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, initialstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, mainmenu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, gamemodels_),
  };
  CryptogramWrapper_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CryptogramWrapper_descriptor_,
      CryptogramWrapper::default_instance_,
      CryptogramWrapper_offsets_,
      -1,
      -1,
      -1,
      sizeof(CryptogramWrapper),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptogramWrapper, _is_default_instance_));
  Wrapper_descriptor_ = file->message_type(1);
  static const int Wrapper_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, utility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, inputchecking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, registration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, cryptogramwrapper_),
  };
  Wrapper_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wrapper_descriptor_,
      Wrapper::default_instance_,
      Wrapper_offsets_,
      -1,
      -1,
      -1,
      sizeof(Wrapper),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrapper, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CryptogramWrapper_descriptor_, &CryptogramWrapper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wrapper_descriptor_, &Wrapper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageModels_2eproto() {
  delete CryptogramWrapper::default_instance_;
  delete CryptogramWrapper_reflection_;
  delete Wrapper::default_instance_;
  delete Wrapper_reflection_;
}

void protobuf_AddDesc_MessageModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MessageModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_UtilityModels_2eproto();
  ::protobuf_AddDesc_RegLogModels_2eproto();
  ::protobuf_AddDesc_DisableWarnings_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MessageModels.proto\032\023UtilityModels.pro"
    "to\032\022RegLogModels.proto\032\025DisableWarnings."
    "proto\"\202\001\n\021CryptogramWrapper\022\024\n\014registrat"
    "ion\030\001 \001(\014\022\r\n\005login\030\002 \001(\014\022\024\n\014initialState"
    "\030\003 \001(\014\022\014\n\004room\030\004 \001(\014\022\020\n\010mainMenu\030\005 \001(\014\022\022"
    "\n\ngameModels\030\006 \001(\014\"\266\001\n\007Wrapper\022\031\n\007utilit"
    "y\030\001 \001(\0132\010.Utility\022%\n\rinputChecking\030\002 \001(\013"
    "2\016.InputChecking\022#\n\014registration\030\003 \001(\0132\r"
    ".Registration\022\025\n\005login\030\004 \001(\0132\006.Login\022-\n\021"
    "cryptogramWrapper\030\005 \001(\0132\022.CryptogramWrap"
    "perB-\n\034com.spiky.server.protomodelsB\rMes"
    "sageModelsb\006proto3", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageModels.proto", &protobuf_RegisterTypes);
  CryptogramWrapper::default_instance_ = new CryptogramWrapper();
  Wrapper::default_instance_ = new Wrapper();
  CryptogramWrapper::default_instance_->InitAsDefaultInstance();
  Wrapper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageModels_2eproto {
  StaticDescriptorInitializer_MessageModels_2eproto() {
    protobuf_AddDesc_MessageModels_2eproto();
  }
} static_descriptor_initializer_MessageModels_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptogramWrapper::kRegistrationFieldNumber;
const int CryptogramWrapper::kLoginFieldNumber;
const int CryptogramWrapper::kInitialStateFieldNumber;
const int CryptogramWrapper::kRoomFieldNumber;
const int CryptogramWrapper::kMainMenuFieldNumber;
const int CryptogramWrapper::kGameModelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptogramWrapper::CryptogramWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CryptogramWrapper)
}

void CryptogramWrapper::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CryptogramWrapper::CryptogramWrapper(const CryptogramWrapper& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CryptogramWrapper)
}

void CryptogramWrapper::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  registration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialstate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainmenu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamemodels_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CryptogramWrapper::~CryptogramWrapper() {
  // @@protoc_insertion_point(destructor:CryptogramWrapper)
  SharedDtor();
}

void CryptogramWrapper::SharedDtor() {
  registration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialstate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainmenu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamemodels_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CryptogramWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CryptogramWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CryptogramWrapper_descriptor_;
}

const CryptogramWrapper& CryptogramWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModels_2eproto();
  return *default_instance_;
}

CryptogramWrapper* CryptogramWrapper::default_instance_ = NULL;

CryptogramWrapper* CryptogramWrapper::New(::google::protobuf::Arena* arena) const {
  CryptogramWrapper* n = new CryptogramWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CryptogramWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:CryptogramWrapper)
  registration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initialstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainmenu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamemodels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CryptogramWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CryptogramWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes registration = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_registration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional bytes login = 2;
      case 2: {
        if (tag == 18) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_initialState;
        break;
      }

      // optional bytes initialState = 3;
      case 3: {
        if (tag == 26) {
         parse_initialState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_initialstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room;
        break;
      }

      // optional bytes room = 4;
      case 4: {
        if (tag == 34) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mainMenu;
        break;
      }

      // optional bytes mainMenu = 5;
      case 5: {
        if (tag == 42) {
         parse_mainMenu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mainmenu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gameModels;
        break;
      }

      // optional bytes gameModels = 6;
      case 6: {
        if (tag == 50) {
         parse_gameModels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamemodels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CryptogramWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CryptogramWrapper)
  return false;
#undef DO_
}

void CryptogramWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CryptogramWrapper)
  // optional bytes registration = 1;
  if (this->registration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->registration(), output);
  }

  // optional bytes login = 2;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->login(), output);
  }

  // optional bytes initialState = 3;
  if (this->initialstate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->initialstate(), output);
  }

  // optional bytes room = 4;
  if (this->room().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->room(), output);
  }

  // optional bytes mainMenu = 5;
  if (this->mainmenu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->mainmenu(), output);
  }

  // optional bytes gameModels = 6;
  if (this->gamemodels().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->gamemodels(), output);
  }

  // @@protoc_insertion_point(serialize_end:CryptogramWrapper)
}

::google::protobuf::uint8* CryptogramWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CryptogramWrapper)
  // optional bytes registration = 1;
  if (this->registration().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->registration(), target);
  }

  // optional bytes login = 2;
  if (this->login().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->login(), target);
  }

  // optional bytes initialState = 3;
  if (this->initialstate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->initialstate(), target);
  }

  // optional bytes room = 4;
  if (this->room().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->room(), target);
  }

  // optional bytes mainMenu = 5;
  if (this->mainmenu().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->mainmenu(), target);
  }

  // optional bytes gameModels = 6;
  if (this->gamemodels().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->gamemodels(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CryptogramWrapper)
  return target;
}

int CryptogramWrapper::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CryptogramWrapper)
  int total_size = 0;

  // optional bytes registration = 1;
  if (this->registration().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->registration());
  }

  // optional bytes login = 2;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->login());
  }

  // optional bytes initialState = 3;
  if (this->initialstate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->initialstate());
  }

  // optional bytes room = 4;
  if (this->room().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->room());
  }

  // optional bytes mainMenu = 5;
  if (this->mainmenu().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mainmenu());
  }

  // optional bytes gameModels = 6;
  if (this->gamemodels().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gamemodels());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CryptogramWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CryptogramWrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CryptogramWrapper* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptogramWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CryptogramWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CryptogramWrapper)
    MergeFrom(*source);
  }
}

void CryptogramWrapper::MergeFrom(const CryptogramWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CryptogramWrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.registration().size() > 0) {

    registration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.registration_);
  }
  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.initialstate().size() > 0) {

    initialstate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initialstate_);
  }
  if (from.room().size() > 0) {

    room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  if (from.mainmenu().size() > 0) {

    mainmenu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainmenu_);
  }
  if (from.gamemodels().size() > 0) {

    gamemodels_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamemodels_);
  }
}

void CryptogramWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CryptogramWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptogramWrapper::CopyFrom(const CryptogramWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CryptogramWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptogramWrapper::IsInitialized() const {

  return true;
}

void CryptogramWrapper::Swap(CryptogramWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptogramWrapper::InternalSwap(CryptogramWrapper* other) {
  registration_.Swap(&other->registration_);
  login_.Swap(&other->login_);
  initialstate_.Swap(&other->initialstate_);
  room_.Swap(&other->room_);
  mainmenu_.Swap(&other->mainmenu_);
  gamemodels_.Swap(&other->gamemodels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CryptogramWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CryptogramWrapper_descriptor_;
  metadata.reflection = CryptogramWrapper_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CryptogramWrapper

// optional bytes registration = 1;
void CryptogramWrapper::clear_registration() {
  registration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CryptogramWrapper::registration() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.registration)
  return registration_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_registration(const ::std::string& value) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.registration)
}
 void CryptogramWrapper::set_registration(const char* value) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.registration)
}
 void CryptogramWrapper::set_registration(const void* value, size_t size) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.registration)
}
 ::std::string* CryptogramWrapper::mutable_registration() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.registration)
  return registration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptogramWrapper::release_registration() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.registration)
  
  return registration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_allocated_registration(::std::string* registration) {
  if (registration != NULL) {
    
  } else {
    
  }
  registration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.registration)
}

// optional bytes login = 2;
void CryptogramWrapper::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CryptogramWrapper::login() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.login)
  return login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.login)
}
 void CryptogramWrapper::set_login(const char* value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.login)
}
 void CryptogramWrapper::set_login(const void* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.login)
}
 ::std::string* CryptogramWrapper::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptogramWrapper::release_login() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.login)
}

// optional bytes initialState = 3;
void CryptogramWrapper::clear_initialstate() {
  initialstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CryptogramWrapper::initialstate() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.initialState)
  return initialstate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_initialstate(const ::std::string& value) {
  
  initialstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.initialState)
}
 void CryptogramWrapper::set_initialstate(const char* value) {
  
  initialstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.initialState)
}
 void CryptogramWrapper::set_initialstate(const void* value, size_t size) {
  
  initialstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.initialState)
}
 ::std::string* CryptogramWrapper::mutable_initialstate() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.initialState)
  return initialstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptogramWrapper::release_initialstate() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.initialState)
  
  return initialstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_allocated_initialstate(::std::string* initialstate) {
  if (initialstate != NULL) {
    
  } else {
    
  }
  initialstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initialstate);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.initialState)
}

// optional bytes room = 4;
void CryptogramWrapper::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CryptogramWrapper::room() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.room)
  return room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_room(const ::std::string& value) {
  
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.room)
}
 void CryptogramWrapper::set_room(const char* value) {
  
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.room)
}
 void CryptogramWrapper::set_room(const void* value, size_t size) {
  
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.room)
}
 ::std::string* CryptogramWrapper::mutable_room() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptogramWrapper::release_room() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.room)
  
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    
  } else {
    
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.room)
}

// optional bytes mainMenu = 5;
void CryptogramWrapper::clear_mainmenu() {
  mainmenu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CryptogramWrapper::mainmenu() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.mainMenu)
  return mainmenu_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_mainmenu(const ::std::string& value) {
  
  mainmenu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.mainMenu)
}
 void CryptogramWrapper::set_mainmenu(const char* value) {
  
  mainmenu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.mainMenu)
}
 void CryptogramWrapper::set_mainmenu(const void* value, size_t size) {
  
  mainmenu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.mainMenu)
}
 ::std::string* CryptogramWrapper::mutable_mainmenu() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.mainMenu)
  return mainmenu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptogramWrapper::release_mainmenu() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.mainMenu)
  
  return mainmenu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_allocated_mainmenu(::std::string* mainmenu) {
  if (mainmenu != NULL) {
    
  } else {
    
  }
  mainmenu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainmenu);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.mainMenu)
}

// optional bytes gameModels = 6;
void CryptogramWrapper::clear_gamemodels() {
  gamemodels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CryptogramWrapper::gamemodels() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.gameModels)
  return gamemodels_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_gamemodels(const ::std::string& value) {
  
  gamemodels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.gameModels)
}
 void CryptogramWrapper::set_gamemodels(const char* value) {
  
  gamemodels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.gameModels)
}
 void CryptogramWrapper::set_gamemodels(const void* value, size_t size) {
  
  gamemodels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.gameModels)
}
 ::std::string* CryptogramWrapper::mutable_gamemodels() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.gameModels)
  return gamemodels_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CryptogramWrapper::release_gamemodels() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.gameModels)
  
  return gamemodels_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CryptogramWrapper::set_allocated_gamemodels(::std::string* gamemodels) {
  if (gamemodels != NULL) {
    
  } else {
    
  }
  gamemodels_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamemodels);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.gameModels)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wrapper::kUtilityFieldNumber;
const int Wrapper::kInputCheckingFieldNumber;
const int Wrapper::kRegistrationFieldNumber;
const int Wrapper::kLoginFieldNumber;
const int Wrapper::kCryptogramWrapperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wrapper::Wrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Wrapper)
}

void Wrapper::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  utility_ = const_cast< ::Utility*>(&::Utility::default_instance());
  inputchecking_ = const_cast< ::InputChecking*>(&::InputChecking::default_instance());
  registration_ = const_cast< ::Registration*>(&::Registration::default_instance());
  login_ = const_cast< ::Login*>(&::Login::default_instance());
  cryptogramwrapper_ = const_cast< ::CryptogramWrapper*>(&::CryptogramWrapper::default_instance());
}

Wrapper::Wrapper(const Wrapper& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Wrapper)
}

void Wrapper::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  utility_ = NULL;
  inputchecking_ = NULL;
  registration_ = NULL;
  login_ = NULL;
  cryptogramwrapper_ = NULL;
}

Wrapper::~Wrapper() {
  // @@protoc_insertion_point(destructor:Wrapper)
  SharedDtor();
}

void Wrapper::SharedDtor() {
  if (this != default_instance_) {
    delete utility_;
    delete inputchecking_;
    delete registration_;
    delete login_;
    delete cryptogramwrapper_;
  }
}

void Wrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wrapper_descriptor_;
}

const Wrapper& Wrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageModels_2eproto();
  return *default_instance_;
}

Wrapper* Wrapper::default_instance_ = NULL;

Wrapper* Wrapper::New(::google::protobuf::Arena* arena) const {
  Wrapper* n = new Wrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:Wrapper)
  if (GetArenaNoVirtual() == NULL && utility_ != NULL) delete utility_;
  utility_ = NULL;
  if (GetArenaNoVirtual() == NULL && inputchecking_ != NULL) delete inputchecking_;
  inputchecking_ = NULL;
  if (GetArenaNoVirtual() == NULL && registration_ != NULL) delete registration_;
  registration_ = NULL;
  if (GetArenaNoVirtual() == NULL && login_ != NULL) delete login_;
  login_ = NULL;
  if (GetArenaNoVirtual() == NULL && cryptogramwrapper_ != NULL) delete cryptogramwrapper_;
  cryptogramwrapper_ = NULL;
}

bool Wrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Wrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Utility utility = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_utility()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inputChecking;
        break;
      }

      // optional .InputChecking inputChecking = 2;
      case 2: {
        if (tag == 18) {
         parse_inputChecking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inputchecking()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_registration;
        break;
      }

      // optional .Registration registration = 3;
      case 3: {
        if (tag == 26) {
         parse_registration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_login;
        break;
      }

      // optional .Login login = 4;
      case 4: {
        if (tag == 34) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cryptogramWrapper;
        break;
      }

      // optional .CryptogramWrapper cryptogramWrapper = 5;
      case 5: {
        if (tag == 42) {
         parse_cryptogramWrapper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cryptogramwrapper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Wrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Wrapper)
  return false;
#undef DO_
}

void Wrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Wrapper)
  // optional .Utility utility = 1;
  if (this->has_utility()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->utility_, output);
  }

  // optional .InputChecking inputChecking = 2;
  if (this->has_inputchecking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->inputchecking_, output);
  }

  // optional .Registration registration = 3;
  if (this->has_registration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->registration_, output);
  }

  // optional .Login login = 4;
  if (this->has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->login_, output);
  }

  // optional .CryptogramWrapper cryptogramWrapper = 5;
  if (this->has_cryptogramwrapper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cryptogramwrapper_, output);
  }

  // @@protoc_insertion_point(serialize_end:Wrapper)
}

::google::protobuf::uint8* Wrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wrapper)
  // optional .Utility utility = 1;
  if (this->has_utility()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->utility_, false, target);
  }

  // optional .InputChecking inputChecking = 2;
  if (this->has_inputchecking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->inputchecking_, false, target);
  }

  // optional .Registration registration = 3;
  if (this->has_registration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->registration_, false, target);
  }

  // optional .Login login = 4;
  if (this->has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->login_, false, target);
  }

  // optional .CryptogramWrapper cryptogramWrapper = 5;
  if (this->has_cryptogramwrapper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cryptogramwrapper_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Wrapper)
  return target;
}

int Wrapper::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Wrapper)
  int total_size = 0;

  // optional .Utility utility = 1;
  if (this->has_utility()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->utility_);
  }

  // optional .InputChecking inputChecking = 2;
  if (this->has_inputchecking()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inputchecking_);
  }

  // optional .Registration registration = 3;
  if (this->has_registration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->registration_);
  }

  // optional .Login login = 4;
  if (this->has_login()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->login_);
  }

  // optional .CryptogramWrapper cryptogramWrapper = 5;
  if (this->has_cryptogramwrapper()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cryptogramwrapper_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Wrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Wrapper* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Wrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Wrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Wrapper)
    MergeFrom(*source);
  }
}

void Wrapper::MergeFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Wrapper)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_utility()) {
    mutable_utility()->::Utility::MergeFrom(from.utility());
  }
  if (from.has_inputchecking()) {
    mutable_inputchecking()->::InputChecking::MergeFrom(from.inputchecking());
  }
  if (from.has_registration()) {
    mutable_registration()->::Registration::MergeFrom(from.registration());
  }
  if (from.has_login()) {
    mutable_login()->::Login::MergeFrom(from.login());
  }
  if (from.has_cryptogramwrapper()) {
    mutable_cryptogramwrapper()->::CryptogramWrapper::MergeFrom(from.cryptogramwrapper());
  }
}

void Wrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrapper::CopyFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrapper::IsInitialized() const {

  return true;
}

void Wrapper::Swap(Wrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wrapper::InternalSwap(Wrapper* other) {
  std::swap(utility_, other->utility_);
  std::swap(inputchecking_, other->inputchecking_);
  std::swap(registration_, other->registration_);
  std::swap(login_, other->login_);
  std::swap(cryptogramwrapper_, other->cryptogramwrapper_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wrapper_descriptor_;
  metadata.reflection = Wrapper_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wrapper

// optional .Utility utility = 1;
bool Wrapper::has_utility() const {
  return !_is_default_instance_ && utility_ != NULL;
}
void Wrapper::clear_utility() {
  if (GetArenaNoVirtual() == NULL && utility_ != NULL) delete utility_;
  utility_ = NULL;
}
const ::Utility& Wrapper::utility() const {
  // @@protoc_insertion_point(field_get:Wrapper.utility)
  return utility_ != NULL ? *utility_ : *default_instance_->utility_;
}
::Utility* Wrapper::mutable_utility() {
  
  if (utility_ == NULL) {
    utility_ = new ::Utility;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.utility)
  return utility_;
}
::Utility* Wrapper::release_utility() {
  // @@protoc_insertion_point(field_release:Wrapper.utility)
  
  ::Utility* temp = utility_;
  utility_ = NULL;
  return temp;
}
void Wrapper::set_allocated_utility(::Utility* utility) {
  delete utility_;
  utility_ = utility;
  if (utility) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.utility)
}

// optional .InputChecking inputChecking = 2;
bool Wrapper::has_inputchecking() const {
  return !_is_default_instance_ && inputchecking_ != NULL;
}
void Wrapper::clear_inputchecking() {
  if (GetArenaNoVirtual() == NULL && inputchecking_ != NULL) delete inputchecking_;
  inputchecking_ = NULL;
}
const ::InputChecking& Wrapper::inputchecking() const {
  // @@protoc_insertion_point(field_get:Wrapper.inputChecking)
  return inputchecking_ != NULL ? *inputchecking_ : *default_instance_->inputchecking_;
}
::InputChecking* Wrapper::mutable_inputchecking() {
  
  if (inputchecking_ == NULL) {
    inputchecking_ = new ::InputChecking;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.inputChecking)
  return inputchecking_;
}
::InputChecking* Wrapper::release_inputchecking() {
  // @@protoc_insertion_point(field_release:Wrapper.inputChecking)
  
  ::InputChecking* temp = inputchecking_;
  inputchecking_ = NULL;
  return temp;
}
void Wrapper::set_allocated_inputchecking(::InputChecking* inputchecking) {
  delete inputchecking_;
  inputchecking_ = inputchecking;
  if (inputchecking) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.inputChecking)
}

// optional .Registration registration = 3;
bool Wrapper::has_registration() const {
  return !_is_default_instance_ && registration_ != NULL;
}
void Wrapper::clear_registration() {
  if (GetArenaNoVirtual() == NULL && registration_ != NULL) delete registration_;
  registration_ = NULL;
}
const ::Registration& Wrapper::registration() const {
  // @@protoc_insertion_point(field_get:Wrapper.registration)
  return registration_ != NULL ? *registration_ : *default_instance_->registration_;
}
::Registration* Wrapper::mutable_registration() {
  
  if (registration_ == NULL) {
    registration_ = new ::Registration;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.registration)
  return registration_;
}
::Registration* Wrapper::release_registration() {
  // @@protoc_insertion_point(field_release:Wrapper.registration)
  
  ::Registration* temp = registration_;
  registration_ = NULL;
  return temp;
}
void Wrapper::set_allocated_registration(::Registration* registration) {
  delete registration_;
  registration_ = registration;
  if (registration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.registration)
}

// optional .Login login = 4;
bool Wrapper::has_login() const {
  return !_is_default_instance_ && login_ != NULL;
}
void Wrapper::clear_login() {
  if (GetArenaNoVirtual() == NULL && login_ != NULL) delete login_;
  login_ = NULL;
}
const ::Login& Wrapper::login() const {
  // @@protoc_insertion_point(field_get:Wrapper.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
::Login* Wrapper::mutable_login() {
  
  if (login_ == NULL) {
    login_ = new ::Login;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.login)
  return login_;
}
::Login* Wrapper::release_login() {
  // @@protoc_insertion_point(field_release:Wrapper.login)
  
  ::Login* temp = login_;
  login_ = NULL;
  return temp;
}
void Wrapper::set_allocated_login(::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.login)
}

// optional .CryptogramWrapper cryptogramWrapper = 5;
bool Wrapper::has_cryptogramwrapper() const {
  return !_is_default_instance_ && cryptogramwrapper_ != NULL;
}
void Wrapper::clear_cryptogramwrapper() {
  if (GetArenaNoVirtual() == NULL && cryptogramwrapper_ != NULL) delete cryptogramwrapper_;
  cryptogramwrapper_ = NULL;
}
const ::CryptogramWrapper& Wrapper::cryptogramwrapper() const {
  // @@protoc_insertion_point(field_get:Wrapper.cryptogramWrapper)
  return cryptogramwrapper_ != NULL ? *cryptogramwrapper_ : *default_instance_->cryptogramwrapper_;
}
::CryptogramWrapper* Wrapper::mutable_cryptogramwrapper() {
  
  if (cryptogramwrapper_ == NULL) {
    cryptogramwrapper_ = new ::CryptogramWrapper;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.cryptogramWrapper)
  return cryptogramwrapper_;
}
::CryptogramWrapper* Wrapper::release_cryptogramwrapper() {
  // @@protoc_insertion_point(field_release:Wrapper.cryptogramWrapper)
  
  ::CryptogramWrapper* temp = cryptogramwrapper_;
  cryptogramwrapper_ = NULL;
  return temp;
}
void Wrapper::set_allocated_cryptogramwrapper(::CryptogramWrapper* cryptogramwrapper) {
  delete cryptogramwrapper_;
  cryptogramwrapper_ = cryptogramwrapper;
  if (cryptogramwrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.cryptogramWrapper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
