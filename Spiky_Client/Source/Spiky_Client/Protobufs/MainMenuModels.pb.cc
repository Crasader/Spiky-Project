// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MainMenuModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MainMenuModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_reflection_ = NULL;
struct ChatOneofInstance {
  bool subscribe_;
}* Chat_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MainMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainMenu_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MainMenuModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MainMenuModels_2eproto() {
  protobuf_AddDesc_MainMenuModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MainMenuModels.proto");
  GOOGLE_CHECK(file != NULL);
  ChatMessage_descriptor_ = file->message_type(0);
  static const int ChatMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, text_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _is_default_instance_));
  Chat_descriptor_ = file->message_type(1);
  static const int Chat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, text_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Chat_default_oneof_instance_, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, v1_),
  };
  Chat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Chat_descriptor_,
      Chat::default_instance_,
      Chat_offsets_,
      -1,
      -1,
      -1,
      Chat_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _oneof_case_[0]),
      sizeof(Chat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _is_default_instance_));
  MainMenu_descriptor_ = file->message_type(2);
  static const int MainMenu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMenu, chat_),
  };
  MainMenu_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainMenu_descriptor_,
      MainMenu::default_instance_,
      MainMenu_offsets_,
      -1,
      -1,
      -1,
      sizeof(MainMenu),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMenu, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMenu, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MainMenuModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Chat_descriptor_, &Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainMenu_descriptor_, &MainMenu::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MainMenuModels_2eproto() {
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete Chat::default_instance_;
  delete Chat_default_oneof_instance_;
  delete Chat_reflection_;
  delete MainMenu::default_instance_;
  delete MainMenu_reflection_;
}

void protobuf_AddDesc_MainMenuModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MainMenuModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DisableWarnings_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MainMenuModels.proto\032\025DisableWarnings."
    "proto\"7\n\013ChatMessage\022\014\n\004time\030\001 \001(\003\022\014\n\004na"
    "me\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\"k\n\004Chat\022\014\n\004time\030\001"
    " \001(\003\022\014\n\004name\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\022\023\n\tsubs"
    "cribe\030\004 \001(\010H\000\022\036\n\010messages\030\005 \003(\0132\014.ChatMe"
    "ssageB\004\n\002v1\"\037\n\010MainMenu\022\023\n\004chat\030\001 \001(\0132\005."
    "ChatB.\n\034com.spiky.server.protomodelsB\016Ma"
    "inMenuModelsb\006proto3", 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MainMenuModels.proto", &protobuf_RegisterTypes);
  ChatMessage::default_instance_ = new ChatMessage();
  Chat::default_instance_ = new Chat();
  Chat_default_oneof_instance_ = new ChatOneofInstance();
  MainMenu::default_instance_ = new MainMenu();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  Chat::default_instance_->InitAsDefaultInstance();
  MainMenu::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MainMenuModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MainMenuModels_2eproto {
  StaticDescriptorInitializer_MainMenuModels_2eproto() {
    protobuf_AddDesc_MainMenuModels_2eproto();
  }
} static_descriptor_initializer_MainMenuModels_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kTimeFieldNumber;
const int ChatMessage::kNameFieldNumber;
const int ChatMessage::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatMessage)
}

void ChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MainMenuModels_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessage)
  time_ = GOOGLE_LONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChatMessage.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChatMessage.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatMessage)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessage)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessage)
  int total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  std::swap(time_, other->time_);
  name_.Swap(&other->name_);
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional int64 time = 1;
void ChatMessage::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChatMessage::time() const {
  // @@protoc_insertion_point(field_get:ChatMessage.time)
  return time_;
}
 void ChatMessage::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.time)
}

// optional string name = 2;
void ChatMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::name() const {
  // @@protoc_insertion_point(field_get:ChatMessage.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.name)
}
 void ChatMessage::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.name)
}
 void ChatMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.name)
}
 ::std::string* ChatMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_name() {
  // @@protoc_insertion_point(field_release:ChatMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.name)
}

// optional string text = 3;
void ChatMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::text() const {
  // @@protoc_insertion_point(field_get:ChatMessage.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.text)
}
 void ChatMessage::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.text)
}
 void ChatMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.text)
}
 ::std::string* ChatMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:ChatMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chat::kTimeFieldNumber;
const int Chat::kNameFieldNumber;
const int Chat::kTextFieldNumber;
const int Chat::kSubscribeFieldNumber;
const int Chat::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chat::Chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat)
}

void Chat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Chat_default_oneof_instance_->subscribe_ = false;
}

Chat::Chat(const Chat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Chat)
}

void Chat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:Chat)
  SharedDtor();
}

void Chat::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
  if (this != default_instance_) {
  }
}

void Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_descriptor_;
}

const Chat& Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MainMenuModels_2eproto();
  return *default_instance_;
}

Chat* Chat::default_instance_ = NULL;

Chat* Chat::New(::google::protobuf::Arena* arena) const {
  Chat* n = new Chat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chat::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:Chat)
  switch(v1_case()) {
    case kSubscribe: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat)
  time_ = GOOGLE_LONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.Clear();
  clear_v1();
}

bool Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subscribe;
        break;
      }

      // optional bool subscribe = 4;
      case 4: {
        if (tag == 32) {
         parse_subscribe:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v1_.subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_messages;
        break;
      }

      // repeated .ChatMessage messages = 5;
      case 5: {
        if (tag == 42) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat)
  return false;
#undef DO_
}

void Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat)
  // optional int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional bool subscribe = 4;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->subscribe(), output);
  }

  // repeated .ChatMessage messages = 5;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->messages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Chat)
}

::google::protobuf::uint8* Chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat)
  // optional int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional bool subscribe = 4;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->subscribe(), target);
  }

  // repeated .ChatMessage messages = 5;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->messages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Chat)
  return target;
}

int Chat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Chat)
  int total_size = 0;

  // optional int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // repeated .ChatMessage messages = 5;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  switch (v1_case()) {
    // optional bool subscribe = 4;
    case kSubscribe: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Chat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat)
    MergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  messages_.MergeFrom(from.messages_);
  switch (from.v1_case()) {
    case kSubscribe: {
      set_subscribe(from.subscribe());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {

  return true;
}

void Chat::Swap(Chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chat::InternalSwap(Chat* other) {
  std::swap(time_, other->time_);
  name_.Swap(&other->name_);
  text_.Swap(&other->text_);
  messages_.UnsafeArenaSwap(&other->messages_);
  std::swap(v1_, other->v1_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_descriptor_;
  metadata.reflection = Chat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chat

// optional int64 time = 1;
void Chat::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Chat::time() const {
  // @@protoc_insertion_point(field_get:Chat.time)
  return time_;
}
 void Chat::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:Chat.time)
}

// optional string name = 2;
void Chat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Chat::name() const {
  // @@protoc_insertion_point(field_get:Chat.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chat::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.name)
}
 void Chat::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.name)
}
 void Chat::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.name)
}
 ::std::string* Chat::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Chat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Chat::release_name() {
  // @@protoc_insertion_point(field_release:Chat.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Chat.name)
}

// optional string text = 3;
void Chat::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Chat::text() const {
  // @@protoc_insertion_point(field_get:Chat.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chat::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.text)
}
 void Chat::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.text)
}
 void Chat::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.text)
}
 ::std::string* Chat::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:Chat.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Chat::release_text() {
  // @@protoc_insertion_point(field_release:Chat.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Chat::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Chat.text)
}

// optional bool subscribe = 4;
bool Chat::has_subscribe() const {
  return v1_case() == kSubscribe;
}
void Chat::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
void Chat::clear_subscribe() {
  if (has_subscribe()) {
    v1_.subscribe_ = false;
    clear_has_v1();
  }
}
 bool Chat::subscribe() const {
  // @@protoc_insertion_point(field_get:Chat.subscribe)
  if (has_subscribe()) {
    return v1_.subscribe_;
  }
  return false;
}
 void Chat::set_subscribe(bool value) {
  if (!has_subscribe()) {
    clear_v1();
    set_has_subscribe();
  }
  v1_.subscribe_ = value;
  // @@protoc_insertion_point(field_set:Chat.subscribe)
}

// repeated .ChatMessage messages = 5;
int Chat::messages_size() const {
  return messages_.size();
}
void Chat::clear_messages() {
  messages_.Clear();
}
const ::ChatMessage& Chat::messages(int index) const {
  // @@protoc_insertion_point(field_get:Chat.messages)
  return messages_.Get(index);
}
::ChatMessage* Chat::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.messages)
  return messages_.Mutable(index);
}
::ChatMessage* Chat::add_messages() {
  // @@protoc_insertion_point(field_add:Chat.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChatMessage >*
Chat::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Chat.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::ChatMessage >&
Chat::messages() const {
  // @@protoc_insertion_point(field_list:Chat.messages)
  return messages_;
}

bool Chat::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
void Chat::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
Chat::V1Case Chat::v1_case() const {
  return Chat::V1Case(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainMenu::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainMenu::MainMenu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainMenu)
}

void MainMenu::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  chat_ = const_cast< ::Chat*>(&::Chat::default_instance());
}

MainMenu::MainMenu(const MainMenu& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MainMenu)
}

void MainMenu::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  chat_ = NULL;
}

MainMenu::~MainMenu() {
  // @@protoc_insertion_point(destructor:MainMenu)
  SharedDtor();
}

void MainMenu::SharedDtor() {
  if (this != default_instance_) {
    delete chat_;
  }
}

void MainMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainMenu_descriptor_;
}

const MainMenu& MainMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MainMenuModels_2eproto();
  return *default_instance_;
}

MainMenu* MainMenu::default_instance_ = NULL;

MainMenu* MainMenu::New(::google::protobuf::Arena* arena) const {
  MainMenu* n = new MainMenu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:MainMenu)
  if (GetArenaNoVirtual() == NULL && chat_ != NULL) delete chat_;
  chat_ = NULL;
}

bool MainMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Chat chat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainMenu)
  return false;
#undef DO_
}

void MainMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainMenu)
  // optional .Chat chat = 1;
  if (this->has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chat_, output);
  }

  // @@protoc_insertion_point(serialize_end:MainMenu)
}

::google::protobuf::uint8* MainMenu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MainMenu)
  // optional .Chat chat = 1;
  if (this->has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chat_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MainMenu)
  return target;
}

int MainMenu::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MainMenu)
  int total_size = 0;

  // optional .Chat chat = 1;
  if (this->has_chat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chat_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MainMenu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MainMenu* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MainMenu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MainMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MainMenu)
    MergeFrom(*source);
  }
}

void MainMenu::MergeFrom(const MainMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MainMenu)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_chat()) {
    mutable_chat()->::Chat::MergeFrom(from.chat());
  }
}

void MainMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MainMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMenu::CopyFrom(const MainMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MainMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMenu::IsInitialized() const {

  return true;
}

void MainMenu::Swap(MainMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainMenu::InternalSwap(MainMenu* other) {
  std::swap(chat_, other->chat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainMenu_descriptor_;
  metadata.reflection = MainMenu_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainMenu

// optional .Chat chat = 1;
bool MainMenu::has_chat() const {
  return !_is_default_instance_ && chat_ != NULL;
}
void MainMenu::clear_chat() {
  if (GetArenaNoVirtual() == NULL && chat_ != NULL) delete chat_;
  chat_ = NULL;
}
const ::Chat& MainMenu::chat() const {
  // @@protoc_insertion_point(field_get:MainMenu.chat)
  return chat_ != NULL ? *chat_ : *default_instance_->chat_;
}
::Chat* MainMenu::mutable_chat() {
  
  if (chat_ == NULL) {
    chat_ = new ::Chat;
  }
  // @@protoc_insertion_point(field_mutable:MainMenu.chat)
  return chat_;
}
::Chat* MainMenu::release_chat() {
  // @@protoc_insertion_point(field_release:MainMenu.chat)
  
  ::Chat* temp = chat_;
  chat_ = NULL;
  return temp;
}
void MainMenu::set_allocated_chat(::Chat* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MainMenu.chat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
