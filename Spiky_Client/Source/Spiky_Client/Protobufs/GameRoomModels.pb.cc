// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameRoomModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameRoomModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRoom_reflection_ = NULL;
struct SubscribeRoomOneofInstance {
  bool subscribe_;
}* SubscribeRoom_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RoomDescribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDescribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameRoomModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameRoomModels_2eproto() {
  protobuf_AddDesc_GameRoomModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameRoomModels.proto");
  GOOGLE_CHECK(file != NULL);
  Room_descriptor_ = file->message_type(0);
  static const int Room_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, createroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, roomslistupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, subscriberoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, roomupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, startgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, roomname_),
  };
  Room_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Room_descriptor_,
      Room::default_instance_,
      Room_offsets_,
      -1,
      -1,
      -1,
      sizeof(Room),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _is_default_instance_));
  CreateRoom_descriptor_ = file->message_type(1);
  static const int CreateRoom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, maxplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, creator_),
  };
  CreateRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateRoom_descriptor_,
      CreateRoom::default_instance_,
      CreateRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, _is_default_instance_));
  RoomsListUpdate_descriptor_ = file->message_type(2);
  static const int RoomsListUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsListUpdate, deleteroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsListUpdate, addroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsListUpdate, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsListUpdate, roomowner_),
  };
  RoomsListUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsListUpdate_descriptor_,
      RoomsListUpdate::default_instance_,
      RoomsListUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsListUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsListUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsListUpdate, _is_default_instance_));
  SubscribeRoom_descriptor_ = file->message_type(3);
  static const int SubscribeRoom_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SubscribeRoom_default_oneof_instance_, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, statecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, roomdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, v1_),
  };
  SubscribeRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeRoom_descriptor_,
      SubscribeRoom::default_instance_,
      SubscribeRoom_offsets_,
      -1,
      -1,
      -1,
      SubscribeRoom_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, _oneof_case_[0]),
      sizeof(SubscribeRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRoom, _is_default_instance_));
  RoomDescribe_descriptor_ = file->message_type(4);
  static const int RoomDescribe_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, team1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, team2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, undistributed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, maxplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, chat_),
  };
  RoomDescribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomDescribe_descriptor_,
      RoomDescribe::default_instance_,
      RoomDescribe_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomDescribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDescribe, _is_default_instance_));
  TeamPlayer_descriptor_ = file->message_type(5);
  static const int TeamPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayer, player_name_),
  };
  TeamPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamPlayer_descriptor_,
      TeamPlayer::default_instance_,
      TeamPlayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(TeamPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayer, _is_default_instance_));
  RoomUpdate_descriptor_ = file->message_type(6);
  static const int RoomUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, roomdescribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, targetteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, roomname_),
  };
  RoomUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomUpdate_descriptor_,
      RoomUpdate::default_instance_,
      RoomUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUpdate, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameRoomModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Room_descriptor_, &Room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateRoom_descriptor_, &CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsListUpdate_descriptor_, &RoomsListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeRoom_descriptor_, &SubscribeRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomDescribe_descriptor_, &RoomDescribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamPlayer_descriptor_, &TeamPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomUpdate_descriptor_, &RoomUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameRoomModels_2eproto() {
  delete Room::default_instance_;
  delete Room_reflection_;
  delete CreateRoom::default_instance_;
  delete CreateRoom_reflection_;
  delete RoomsListUpdate::default_instance_;
  delete RoomsListUpdate_reflection_;
  delete SubscribeRoom::default_instance_;
  delete SubscribeRoom_default_oneof_instance_;
  delete SubscribeRoom_reflection_;
  delete RoomDescribe::default_instance_;
  delete RoomDescribe_reflection_;
  delete TeamPlayer::default_instance_;
  delete TeamPlayer_reflection_;
  delete RoomUpdate::default_instance_;
  delete RoomUpdate_reflection_;
}

void protobuf_AddDesc_GameRoomModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GameRoomModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DisableWarnings_2eproto();
  ::protobuf_AddDesc_MainMenuModels_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024GameRoomModels.proto\032\025DisableWarnings."
    "proto\032\024MainMenuModels.proto\"\277\001\n\004Room\022\037\n\n"
    "createRoom\030\001 \001(\0132\013.CreateRoom\022)\n\017roomsLi"
    "stUpdate\030\002 \001(\0132\020.RoomsListUpdate\022%\n\rsubs"
    "cribeRoom\030\003 \001(\0132\016.SubscribeRoom\022\037\n\nroomU"
    "pdate\030\004 \001(\0132\013.RoomUpdate\022\021\n\tstartGame\030\005 "
    "\001(\010\022\020\n\010roomName\030\006 \001(\t\"f\n\nCreateRoom\022\020\n\010r"
    "oomName\030\001 \001(\t\022\017\n\007mapName\030\002 \001(\t\022\020\n\010gameTi"
    "me\030\003 \001(\t\022\022\n\nmaxPlayers\030\004 \001(\t\022\017\n\007creator\030"
    "\005 \001(\t\"[\n\017RoomsListUpdate\022\022\n\ndeleteRoom\030\001"
    " \001(\010\022\017\n\007addRoom\030\002 \001(\010\022\020\n\010roomName\030\003 \001(\t\022"
    "\021\n\troomOwner\030\004 \001(\t\"\222\001\n\rSubscribeRoom\022\023\n\t"
    "subscribe\030\001 \001(\010H\000\022\020\n\010roomName\030\002 \001(\t\022\021\n\ts"
    "tateCode\030\003 \001(\005\022#\n\014roomDescribe\030\004 \001(\0132\r.R"
    "oomDescribe\022\016\n\006player\030\005 \001(\t\022\014\n\004team\030\006 \001("
    "\tB\004\n\002v1\"\331\001\n\014RoomDescribe\022\032\n\005team1\030\001 \003(\0132"
    "\013.TeamPlayer\022\032\n\005team2\030\002 \003(\0132\013.TeamPlayer"
    "\022\"\n\rundistributed\030\003 \003(\0132\013.TeamPlayer\022\020\n\010"
    "roomName\030\004 \001(\t\022\017\n\007mapName\030\005 \001(\t\022\020\n\010gameT"
    "ime\030\006 \001(\t\022\022\n\nmaxPlayers\030\007 \001(\t\022\017\n\007creator"
    "\030\010 \001(\t\022\023\n\004chat\030\t \001(\0132\005.Chat\"!\n\nTeamPlaye"
    "r\022\023\n\013player_name\030\001 \001(\t\"W\n\nRoomUpdate\022#\n\014"
    "roomDescribe\030\001 \001(\0132\r.RoomDescribe\022\022\n\ntar"
    "getTeam\030\002 \001(\t\022\020\n\010roomName\030\003 \001(\tB.\n\034com.s"
    "piky.server.protomodelsB\016GameRoomModelsb"
    "\006proto3", 1007);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameRoomModels.proto", &protobuf_RegisterTypes);
  Room::default_instance_ = new Room();
  CreateRoom::default_instance_ = new CreateRoom();
  RoomsListUpdate::default_instance_ = new RoomsListUpdate();
  SubscribeRoom::default_instance_ = new SubscribeRoom();
  SubscribeRoom_default_oneof_instance_ = new SubscribeRoomOneofInstance();
  RoomDescribe::default_instance_ = new RoomDescribe();
  TeamPlayer::default_instance_ = new TeamPlayer();
  RoomUpdate::default_instance_ = new RoomUpdate();
  Room::default_instance_->InitAsDefaultInstance();
  CreateRoom::default_instance_->InitAsDefaultInstance();
  RoomsListUpdate::default_instance_->InitAsDefaultInstance();
  SubscribeRoom::default_instance_->InitAsDefaultInstance();
  RoomDescribe::default_instance_->InitAsDefaultInstance();
  TeamPlayer::default_instance_->InitAsDefaultInstance();
  RoomUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameRoomModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameRoomModels_2eproto {
  StaticDescriptorInitializer_GameRoomModels_2eproto() {
    protobuf_AddDesc_GameRoomModels_2eproto();
  }
} static_descriptor_initializer_GameRoomModels_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room::kCreateRoomFieldNumber;
const int Room::kRoomsListUpdateFieldNumber;
const int Room::kSubscribeRoomFieldNumber;
const int Room::kRoomUpdateFieldNumber;
const int Room::kStartGameFieldNumber;
const int Room::kRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room::Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Room)
}

void Room::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  createroom_ = const_cast< ::CreateRoom*>(&::CreateRoom::default_instance());
  roomslistupdate_ = const_cast< ::RoomsListUpdate*>(&::RoomsListUpdate::default_instance());
  subscriberoom_ = const_cast< ::SubscribeRoom*>(&::SubscribeRoom::default_instance());
  roomupdate_ = const_cast< ::RoomUpdate*>(&::RoomUpdate::default_instance());
}

Room::Room(const Room& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Room)
}

void Room::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  createroom_ = NULL;
  roomslistupdate_ = NULL;
  subscriberoom_ = NULL;
  roomupdate_ = NULL;
  startgame_ = false;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:Room)
  SharedDtor();
}

void Room::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete createroom_;
    delete roomslistupdate_;
    delete subscriberoom_;
    delete roomupdate_;
  }
}

void Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_descriptor_;
}

const Room& Room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

Room* Room::default_instance_ = NULL;

Room* Room::New(::google::protobuf::Arena* arena) const {
  Room* n = new Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Room)
  if (GetArenaNoVirtual() == NULL && createroom_ != NULL) delete createroom_;
  createroom_ = NULL;
  if (GetArenaNoVirtual() == NULL && roomslistupdate_ != NULL) delete roomslistupdate_;
  roomslistupdate_ = NULL;
  if (GetArenaNoVirtual() == NULL && subscriberoom_ != NULL) delete subscriberoom_;
  subscriberoom_ = NULL;
  if (GetArenaNoVirtual() == NULL && roomupdate_ != NULL) delete roomupdate_;
  roomupdate_ = NULL;
  startgame_ = false;
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CreateRoom createRoom = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createroom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomsListUpdate;
        break;
      }

      // optional .RoomsListUpdate roomsListUpdate = 2;
      case 2: {
        if (tag == 18) {
         parse_roomsListUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomslistupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subscribeRoom;
        break;
      }

      // optional .SubscribeRoom subscribeRoom = 3;
      case 3: {
        if (tag == 26) {
         parse_subscribeRoom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriberoom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomUpdate;
        break;
      }

      // optional .RoomUpdate roomUpdate = 4;
      case 4: {
        if (tag == 34) {
         parse_roomUpdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomupdate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startGame;
        break;
      }

      // optional bool startGame = 5;
      case 5: {
        if (tag == 40) {
         parse_startGame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startgame_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_roomName;
        break;
      }

      // optional string roomName = 6;
      case 6: {
        if (tag == 50) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Room.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Room)
  return false;
#undef DO_
}

void Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Room)
  // optional .CreateRoom createRoom = 1;
  if (this->has_createroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->createroom_, output);
  }

  // optional .RoomsListUpdate roomsListUpdate = 2;
  if (this->has_roomslistupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->roomslistupdate_, output);
  }

  // optional .SubscribeRoom subscribeRoom = 3;
  if (this->has_subscriberoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->subscriberoom_, output);
  }

  // optional .RoomUpdate roomUpdate = 4;
  if (this->has_roomupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->roomupdate_, output);
  }

  // optional bool startGame = 5;
  if (this->startgame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->startgame(), output);
  }

  // optional string roomName = 6;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Room.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->roomname(), output);
  }

  // @@protoc_insertion_point(serialize_end:Room)
}

::google::protobuf::uint8* Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Room)
  // optional .CreateRoom createRoom = 1;
  if (this->has_createroom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->createroom_, false, target);
  }

  // optional .RoomsListUpdate roomsListUpdate = 2;
  if (this->has_roomslistupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->roomslistupdate_, false, target);
  }

  // optional .SubscribeRoom subscribeRoom = 3;
  if (this->has_subscriberoom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->subscriberoom_, false, target);
  }

  // optional .RoomUpdate roomUpdate = 4;
  if (this->has_roomupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->roomupdate_, false, target);
  }

  // optional bool startGame = 5;
  if (this->startgame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->startgame(), target);
  }

  // optional string roomName = 6;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Room.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->roomname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Room)
  return target;
}

int Room::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Room)
  int total_size = 0;

  // optional .CreateRoom createRoom = 1;
  if (this->has_createroom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->createroom_);
  }

  // optional .RoomsListUpdate roomsListUpdate = 2;
  if (this->has_roomslistupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomslistupdate_);
  }

  // optional .SubscribeRoom subscribeRoom = 3;
  if (this->has_subscriberoom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subscriberoom_);
  }

  // optional .RoomUpdate roomUpdate = 4;
  if (this->has_roomupdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomupdate_);
  }

  // optional bool startGame = 5;
  if (this->startgame() != 0) {
    total_size += 1 + 1;
  }

  // optional string roomName = 6;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Room)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Room* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Room)
    MergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Room)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_createroom()) {
    mutable_createroom()->::CreateRoom::MergeFrom(from.createroom());
  }
  if (from.has_roomslistupdate()) {
    mutable_roomslistupdate()->::RoomsListUpdate::MergeFrom(from.roomslistupdate());
  }
  if (from.has_subscriberoom()) {
    mutable_subscriberoom()->::SubscribeRoom::MergeFrom(from.subscriberoom());
  }
  if (from.has_roomupdate()) {
    mutable_roomupdate()->::RoomUpdate::MergeFrom(from.roomupdate());
  }
  if (from.startgame() != 0) {
    set_startgame(from.startgame());
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
}

void Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {

  return true;
}

void Room::Swap(Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room::InternalSwap(Room* other) {
  std::swap(createroom_, other->createroom_);
  std::swap(roomslistupdate_, other->roomslistupdate_);
  std::swap(subscriberoom_, other->subscriberoom_);
  std::swap(roomupdate_, other->roomupdate_);
  std::swap(startgame_, other->startgame_);
  roomname_.Swap(&other->roomname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_descriptor_;
  metadata.reflection = Room_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room

// optional .CreateRoom createRoom = 1;
bool Room::has_createroom() const {
  return !_is_default_instance_ && createroom_ != NULL;
}
void Room::clear_createroom() {
  if (GetArenaNoVirtual() == NULL && createroom_ != NULL) delete createroom_;
  createroom_ = NULL;
}
const ::CreateRoom& Room::createroom() const {
  // @@protoc_insertion_point(field_get:Room.createRoom)
  return createroom_ != NULL ? *createroom_ : *default_instance_->createroom_;
}
::CreateRoom* Room::mutable_createroom() {
  
  if (createroom_ == NULL) {
    createroom_ = new ::CreateRoom;
  }
  // @@protoc_insertion_point(field_mutable:Room.createRoom)
  return createroom_;
}
::CreateRoom* Room::release_createroom() {
  // @@protoc_insertion_point(field_release:Room.createRoom)
  
  ::CreateRoom* temp = createroom_;
  createroom_ = NULL;
  return temp;
}
void Room::set_allocated_createroom(::CreateRoom* createroom) {
  delete createroom_;
  createroom_ = createroom;
  if (createroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Room.createRoom)
}

// optional .RoomsListUpdate roomsListUpdate = 2;
bool Room::has_roomslistupdate() const {
  return !_is_default_instance_ && roomslistupdate_ != NULL;
}
void Room::clear_roomslistupdate() {
  if (GetArenaNoVirtual() == NULL && roomslistupdate_ != NULL) delete roomslistupdate_;
  roomslistupdate_ = NULL;
}
const ::RoomsListUpdate& Room::roomslistupdate() const {
  // @@protoc_insertion_point(field_get:Room.roomsListUpdate)
  return roomslistupdate_ != NULL ? *roomslistupdate_ : *default_instance_->roomslistupdate_;
}
::RoomsListUpdate* Room::mutable_roomslistupdate() {
  
  if (roomslistupdate_ == NULL) {
    roomslistupdate_ = new ::RoomsListUpdate;
  }
  // @@protoc_insertion_point(field_mutable:Room.roomsListUpdate)
  return roomslistupdate_;
}
::RoomsListUpdate* Room::release_roomslistupdate() {
  // @@protoc_insertion_point(field_release:Room.roomsListUpdate)
  
  ::RoomsListUpdate* temp = roomslistupdate_;
  roomslistupdate_ = NULL;
  return temp;
}
void Room::set_allocated_roomslistupdate(::RoomsListUpdate* roomslistupdate) {
  delete roomslistupdate_;
  roomslistupdate_ = roomslistupdate;
  if (roomslistupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Room.roomsListUpdate)
}

// optional .SubscribeRoom subscribeRoom = 3;
bool Room::has_subscriberoom() const {
  return !_is_default_instance_ && subscriberoom_ != NULL;
}
void Room::clear_subscriberoom() {
  if (GetArenaNoVirtual() == NULL && subscriberoom_ != NULL) delete subscriberoom_;
  subscriberoom_ = NULL;
}
const ::SubscribeRoom& Room::subscriberoom() const {
  // @@protoc_insertion_point(field_get:Room.subscribeRoom)
  return subscriberoom_ != NULL ? *subscriberoom_ : *default_instance_->subscriberoom_;
}
::SubscribeRoom* Room::mutable_subscriberoom() {
  
  if (subscriberoom_ == NULL) {
    subscriberoom_ = new ::SubscribeRoom;
  }
  // @@protoc_insertion_point(field_mutable:Room.subscribeRoom)
  return subscriberoom_;
}
::SubscribeRoom* Room::release_subscriberoom() {
  // @@protoc_insertion_point(field_release:Room.subscribeRoom)
  
  ::SubscribeRoom* temp = subscriberoom_;
  subscriberoom_ = NULL;
  return temp;
}
void Room::set_allocated_subscriberoom(::SubscribeRoom* subscriberoom) {
  delete subscriberoom_;
  subscriberoom_ = subscriberoom;
  if (subscriberoom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Room.subscribeRoom)
}

// optional .RoomUpdate roomUpdate = 4;
bool Room::has_roomupdate() const {
  return !_is_default_instance_ && roomupdate_ != NULL;
}
void Room::clear_roomupdate() {
  if (GetArenaNoVirtual() == NULL && roomupdate_ != NULL) delete roomupdate_;
  roomupdate_ = NULL;
}
const ::RoomUpdate& Room::roomupdate() const {
  // @@protoc_insertion_point(field_get:Room.roomUpdate)
  return roomupdate_ != NULL ? *roomupdate_ : *default_instance_->roomupdate_;
}
::RoomUpdate* Room::mutable_roomupdate() {
  
  if (roomupdate_ == NULL) {
    roomupdate_ = new ::RoomUpdate;
  }
  // @@protoc_insertion_point(field_mutable:Room.roomUpdate)
  return roomupdate_;
}
::RoomUpdate* Room::release_roomupdate() {
  // @@protoc_insertion_point(field_release:Room.roomUpdate)
  
  ::RoomUpdate* temp = roomupdate_;
  roomupdate_ = NULL;
  return temp;
}
void Room::set_allocated_roomupdate(::RoomUpdate* roomupdate) {
  delete roomupdate_;
  roomupdate_ = roomupdate;
  if (roomupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Room.roomUpdate)
}

// optional bool startGame = 5;
void Room::clear_startgame() {
  startgame_ = false;
}
 bool Room::startgame() const {
  // @@protoc_insertion_point(field_get:Room.startGame)
  return startgame_;
}
 void Room::set_startgame(bool value) {
  
  startgame_ = value;
  // @@protoc_insertion_point(field_set:Room.startGame)
}

// optional string roomName = 6;
void Room::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Room::roomname() const {
  // @@protoc_insertion_point(field_get:Room.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Room::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Room.roomName)
}
 void Room::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Room.roomName)
}
 void Room::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Room.roomName)
}
 ::std::string* Room::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:Room.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Room::release_roomname() {
  // @@protoc_insertion_point(field_release:Room.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Room::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:Room.roomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoom::kRoomNameFieldNumber;
const int CreateRoom::kMapNameFieldNumber;
const int CreateRoom::kGameTimeFieldNumber;
const int CreateRoom::kMaxPlayersFieldNumber;
const int CreateRoom::kCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoom::CreateRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateRoom)
}

void CreateRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateRoom::CreateRoom(const CreateRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateRoom)
}

void CreateRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateRoom::~CreateRoom() {
  // @@protoc_insertion_point(destructor:CreateRoom)
  SharedDtor();
}

void CreateRoom::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoom_descriptor_;
}

const CreateRoom& CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

CreateRoom* CreateRoom::default_instance_ = NULL;

CreateRoom* CreateRoom::New(::google::protobuf::Arena* arena) const {
  CreateRoom* n = new CreateRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRoom)
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateRoom.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapName;
        break;
      }

      // optional string mapName = 2;
      case 2: {
        if (tag == 18) {
         parse_mapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateRoom.mapName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gameTime;
        break;
      }

      // optional string gameTime = 3;
      case 3: {
        if (tag == 26) {
         parse_gameTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gametime().data(), this->gametime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateRoom.gameTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_maxPlayers;
        break;
      }

      // optional string maxPlayers = 4;
      case 4: {
        if (tag == 34) {
         parse_maxPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxplayers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maxplayers().data(), this->maxplayers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateRoom.maxPlayers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_creator;
        break;
      }

      // optional string creator = 5;
      case 5: {
        if (tag == 42) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CreateRoom.creator"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateRoom)
  return false;
#undef DO_
}

void CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateRoom)
  // optional string roomName = 1;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  // optional string mapName = 2;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.mapName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapname(), output);
  }

  // optional string gameTime = 3;
  if (this->gametime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gametime().data(), this->gametime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.gameTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gametime(), output);
  }

  // optional string maxPlayers = 4;
  if (this->maxplayers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxplayers().data(), this->maxplayers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.maxPlayers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->maxplayers(), output);
  }

  // optional string creator = 5;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.creator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->creator(), output);
  }

  // @@protoc_insertion_point(serialize_end:CreateRoom)
}

::google::protobuf::uint8* CreateRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRoom)
  // optional string roomName = 1;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  // optional string mapName = 2;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.mapName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapname(), target);
  }

  // optional string gameTime = 3;
  if (this->gametime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gametime().data(), this->gametime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.gameTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gametime(), target);
  }

  // optional string maxPlayers = 4;
  if (this->maxplayers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxplayers().data(), this->maxplayers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.maxPlayers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->maxplayers(), target);
  }

  // optional string creator = 5;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CreateRoom.creator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->creator(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CreateRoom)
  return target;
}

int CreateRoom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRoom)
  int total_size = 0;

  // optional string roomName = 1;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // optional string mapName = 2;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  // optional string gameTime = 3;
  if (this->gametime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gametime());
  }

  // optional string maxPlayers = 4;
  if (this->maxplayers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maxplayers());
  }

  // optional string creator = 5;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateRoom)
    MergeFrom(*source);
  }
}

void CreateRoom::MergeFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.mapname().size() > 0) {

    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  if (from.gametime().size() > 0) {

    gametime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gametime_);
  }
  if (from.maxplayers().size() > 0) {

    maxplayers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxplayers_);
  }
  if (from.creator().size() > 0) {

    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
}

void CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoom::CopyFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoom::IsInitialized() const {

  return true;
}

void CreateRoom::Swap(CreateRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRoom::InternalSwap(CreateRoom* other) {
  roomname_.Swap(&other->roomname_);
  mapname_.Swap(&other->mapname_);
  gametime_.Swap(&other->gametime_);
  maxplayers_.Swap(&other->maxplayers_);
  creator_.Swap(&other->creator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoom_descriptor_;
  metadata.reflection = CreateRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRoom

// optional string roomName = 1;
void CreateRoom::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRoom::roomname() const {
  // @@protoc_insertion_point(field_get:CreateRoom.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateRoom.roomName)
}
 void CreateRoom::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRoom.roomName)
}
 void CreateRoom::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.roomName)
}
 ::std::string* CreateRoom::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:CreateRoom.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:CreateRoom.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.roomName)
}

// optional string mapName = 2;
void CreateRoom::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRoom::mapname() const {
  // @@protoc_insertion_point(field_get:CreateRoom.mapName)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_mapname(const ::std::string& value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateRoom.mapName)
}
 void CreateRoom::set_mapname(const char* value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRoom.mapName)
}
 void CreateRoom::set_mapname(const char* value, size_t size) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.mapName)
}
 ::std::string* CreateRoom::mutable_mapname() {
  
  // @@protoc_insertion_point(field_mutable:CreateRoom.mapName)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoom::release_mapname() {
  // @@protoc_insertion_point(field_release:CreateRoom.mapName)
  
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    
  } else {
    
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.mapName)
}

// optional string gameTime = 3;
void CreateRoom::clear_gametime() {
  gametime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRoom::gametime() const {
  // @@protoc_insertion_point(field_get:CreateRoom.gameTime)
  return gametime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_gametime(const ::std::string& value) {
  
  gametime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateRoom.gameTime)
}
 void CreateRoom::set_gametime(const char* value) {
  
  gametime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRoom.gameTime)
}
 void CreateRoom::set_gametime(const char* value, size_t size) {
  
  gametime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.gameTime)
}
 ::std::string* CreateRoom::mutable_gametime() {
  
  // @@protoc_insertion_point(field_mutable:CreateRoom.gameTime)
  return gametime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoom::release_gametime() {
  // @@protoc_insertion_point(field_release:CreateRoom.gameTime)
  
  return gametime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_allocated_gametime(::std::string* gametime) {
  if (gametime != NULL) {
    
  } else {
    
  }
  gametime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gametime);
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.gameTime)
}

// optional string maxPlayers = 4;
void CreateRoom::clear_maxplayers() {
  maxplayers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRoom::maxplayers() const {
  // @@protoc_insertion_point(field_get:CreateRoom.maxPlayers)
  return maxplayers_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_maxplayers(const ::std::string& value) {
  
  maxplayers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateRoom.maxPlayers)
}
 void CreateRoom::set_maxplayers(const char* value) {
  
  maxplayers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRoom.maxPlayers)
}
 void CreateRoom::set_maxplayers(const char* value, size_t size) {
  
  maxplayers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.maxPlayers)
}
 ::std::string* CreateRoom::mutable_maxplayers() {
  
  // @@protoc_insertion_point(field_mutable:CreateRoom.maxPlayers)
  return maxplayers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoom::release_maxplayers() {
  // @@protoc_insertion_point(field_release:CreateRoom.maxPlayers)
  
  return maxplayers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_allocated_maxplayers(::std::string* maxplayers) {
  if (maxplayers != NULL) {
    
  } else {
    
  }
  maxplayers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxplayers);
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.maxPlayers)
}

// optional string creator = 5;
void CreateRoom::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRoom::creator() const {
  // @@protoc_insertion_point(field_get:CreateRoom.creator)
  return creator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_creator(const ::std::string& value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateRoom.creator)
}
 void CreateRoom::set_creator(const char* value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRoom.creator)
}
 void CreateRoom::set_creator(const char* value, size_t size) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRoom.creator)
}
 ::std::string* CreateRoom::mutable_creator() {
  
  // @@protoc_insertion_point(field_mutable:CreateRoom.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRoom::release_creator() {
  // @@protoc_insertion_point(field_release:CreateRoom.creator)
  
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRoom::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    
  } else {
    
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:CreateRoom.creator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomsListUpdate::kDeleteRoomFieldNumber;
const int RoomsListUpdate::kAddRoomFieldNumber;
const int RoomsListUpdate::kRoomNameFieldNumber;
const int RoomsListUpdate::kRoomOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomsListUpdate::RoomsListUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomsListUpdate)
}

void RoomsListUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsListUpdate::RoomsListUpdate(const RoomsListUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoomsListUpdate)
}

void RoomsListUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deleteroom_ = false;
  addroom_ = false;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomowner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomsListUpdate::~RoomsListUpdate() {
  // @@protoc_insertion_point(destructor:RoomsListUpdate)
  SharedDtor();
}

void RoomsListUpdate::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomowner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomsListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsListUpdate_descriptor_;
}

const RoomsListUpdate& RoomsListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

RoomsListUpdate* RoomsListUpdate::default_instance_ = NULL;

RoomsListUpdate* RoomsListUpdate::New(::google::protobuf::Arena* arena) const {
  RoomsListUpdate* n = new RoomsListUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsListUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomsListUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoomsListUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsListUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deleteroom_, addroom_);
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomsListUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool deleteRoom = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleteroom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_addRoom;
        break;
      }

      // optional bool addRoom = 2;
      case 2: {
        if (tag == 16) {
         parse_addRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addroom_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomName;
        break;
      }

      // optional string roomName = 3;
      case 3: {
        if (tag == 26) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomsListUpdate.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomOwner;
        break;
      }

      // optional string roomOwner = 4;
      case 4: {
        if (tag == 34) {
         parse_roomOwner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomowner()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomowner().data(), this->roomowner().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomsListUpdate.roomOwner"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomsListUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomsListUpdate)
  return false;
#undef DO_
}

void RoomsListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomsListUpdate)
  // optional bool deleteRoom = 1;
  if (this->deleteroom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->deleteroom(), output);
  }

  // optional bool addRoom = 2;
  if (this->addroom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->addroom(), output);
  }

  // optional string roomName = 3;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomsListUpdate.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomname(), output);
  }

  // optional string roomOwner = 4;
  if (this->roomowner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomowner().data(), this->roomowner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomsListUpdate.roomOwner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomowner(), output);
  }

  // @@protoc_insertion_point(serialize_end:RoomsListUpdate)
}

::google::protobuf::uint8* RoomsListUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomsListUpdate)
  // optional bool deleteRoom = 1;
  if (this->deleteroom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->deleteroom(), target);
  }

  // optional bool addRoom = 2;
  if (this->addroom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->addroom(), target);
  }

  // optional string roomName = 3;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomsListUpdate.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // optional string roomOwner = 4;
  if (this->roomowner().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomowner().data(), this->roomowner().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomsListUpdate.roomOwner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomowner(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RoomsListUpdate)
  return target;
}

int RoomsListUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoomsListUpdate)
  int total_size = 0;

  // optional bool deleteRoom = 1;
  if (this->deleteroom() != 0) {
    total_size += 1 + 1;
  }

  // optional bool addRoom = 2;
  if (this->addroom() != 0) {
    total_size += 1 + 1;
  }

  // optional string roomName = 3;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // optional string roomOwner = 4;
  if (this->roomowner().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomowner());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomsListUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomsListUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsListUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomsListUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomsListUpdate)
    MergeFrom(*source);
  }
}

void RoomsListUpdate::MergeFrom(const RoomsListUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomsListUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.deleteroom() != 0) {
    set_deleteroom(from.deleteroom());
  }
  if (from.addroom() != 0) {
    set_addroom(from.addroom());
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.roomowner().size() > 0) {

    roomowner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomowner_);
  }
}

void RoomsListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomsListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsListUpdate::CopyFrom(const RoomsListUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomsListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsListUpdate::IsInitialized() const {

  return true;
}

void RoomsListUpdate::Swap(RoomsListUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsListUpdate::InternalSwap(RoomsListUpdate* other) {
  std::swap(deleteroom_, other->deleteroom_);
  std::swap(addroom_, other->addroom_);
  roomname_.Swap(&other->roomname_);
  roomowner_.Swap(&other->roomowner_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsListUpdate_descriptor_;
  metadata.reflection = RoomsListUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsListUpdate

// optional bool deleteRoom = 1;
void RoomsListUpdate::clear_deleteroom() {
  deleteroom_ = false;
}
 bool RoomsListUpdate::deleteroom() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.deleteRoom)
  return deleteroom_;
}
 void RoomsListUpdate::set_deleteroom(bool value) {
  
  deleteroom_ = value;
  // @@protoc_insertion_point(field_set:RoomsListUpdate.deleteRoom)
}

// optional bool addRoom = 2;
void RoomsListUpdate::clear_addroom() {
  addroom_ = false;
}
 bool RoomsListUpdate::addroom() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.addRoom)
  return addroom_;
}
 void RoomsListUpdate::set_addroom(bool value) {
  
  addroom_ = value;
  // @@protoc_insertion_point(field_set:RoomsListUpdate.addRoom)
}

// optional string roomName = 3;
void RoomsListUpdate::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsListUpdate::roomname() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsListUpdate::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomsListUpdate.roomName)
}
 void RoomsListUpdate::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomsListUpdate.roomName)
}
 void RoomsListUpdate::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomsListUpdate.roomName)
}
 ::std::string* RoomsListUpdate::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:RoomsListUpdate.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsListUpdate::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomsListUpdate.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsListUpdate::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:RoomsListUpdate.roomName)
}

// optional string roomOwner = 4;
void RoomsListUpdate::clear_roomowner() {
  roomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsListUpdate::roomowner() const {
  // @@protoc_insertion_point(field_get:RoomsListUpdate.roomOwner)
  return roomowner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsListUpdate::set_roomowner(const ::std::string& value) {
  
  roomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomsListUpdate.roomOwner)
}
 void RoomsListUpdate::set_roomowner(const char* value) {
  
  roomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomsListUpdate.roomOwner)
}
 void RoomsListUpdate::set_roomowner(const char* value, size_t size) {
  
  roomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomsListUpdate.roomOwner)
}
 ::std::string* RoomsListUpdate::mutable_roomowner() {
  
  // @@protoc_insertion_point(field_mutable:RoomsListUpdate.roomOwner)
  return roomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsListUpdate::release_roomowner() {
  // @@protoc_insertion_point(field_release:RoomsListUpdate.roomOwner)
  
  return roomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsListUpdate::set_allocated_roomowner(::std::string* roomowner) {
  if (roomowner != NULL) {
    
  } else {
    
  }
  roomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomowner);
  // @@protoc_insertion_point(field_set_allocated:RoomsListUpdate.roomOwner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeRoom::kSubscribeFieldNumber;
const int SubscribeRoom::kRoomNameFieldNumber;
const int SubscribeRoom::kStateCodeFieldNumber;
const int SubscribeRoom::kRoomDescribeFieldNumber;
const int SubscribeRoom::kPlayerFieldNumber;
const int SubscribeRoom::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeRoom::SubscribeRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscribeRoom)
}

void SubscribeRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  SubscribeRoom_default_oneof_instance_->subscribe_ = false;
  roomdescribe_ = const_cast< ::RoomDescribe*>(&::RoomDescribe::default_instance());
}

SubscribeRoom::SubscribeRoom(const SubscribeRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SubscribeRoom)
}

void SubscribeRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statecode_ = 0;
  roomdescribe_ = NULL;
  player_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

SubscribeRoom::~SubscribeRoom() {
  // @@protoc_insertion_point(destructor:SubscribeRoom)
  SharedDtor();
}

void SubscribeRoom::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
  if (this != default_instance_) {
    delete roomdescribe_;
  }
}

void SubscribeRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRoom_descriptor_;
}

const SubscribeRoom& SubscribeRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

SubscribeRoom* SubscribeRoom::default_instance_ = NULL;

SubscribeRoom* SubscribeRoom::New(::google::protobuf::Arena* arena) const {
  SubscribeRoom* n = new SubscribeRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeRoom::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:SubscribeRoom)
  switch(v1_case()) {
    case kSubscribe: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void SubscribeRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscribeRoom)
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statecode_ = 0;
  if (GetArenaNoVirtual() == NULL && roomdescribe_ != NULL) delete roomdescribe_;
  roomdescribe_ = NULL;
  player_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_v1();
}

bool SubscribeRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubscribeRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool subscribe = 1;
      case 1: {
        if (tag == 8) {
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v1_.subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // optional string roomName = 2;
      case 2: {
        if (tag == 18) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SubscribeRoom.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stateCode;
        break;
      }

      // optional int32 stateCode = 3;
      case 3: {
        if (tag == 24) {
         parse_stateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statecode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roomDescribe;
        break;
      }

      // optional .RoomDescribe roomDescribe = 4;
      case 4: {
        if (tag == 34) {
         parse_roomDescribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player;
        break;
      }

      // optional string player = 5;
      case 5: {
        if (tag == 42) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player().data(), this->player().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SubscribeRoom.player"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_team;
        break;
      }

      // optional string team = 6;
      case 6: {
        if (tag == 50) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SubscribeRoom.team"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscribeRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscribeRoom)
  return false;
#undef DO_
}

void SubscribeRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscribeRoom)
  // optional bool subscribe = 1;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->subscribe(), output);
  }

  // optional string roomName = 2;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomname(), output);
  }

  // optional int32 stateCode = 3;
  if (this->statecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->statecode(), output);
  }

  // optional .RoomDescribe roomDescribe = 4;
  if (this->has_roomdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->roomdescribe_, output);
  }

  // optional string player = 5;
  if (this->player().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player().data(), this->player().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.player");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->player(), output);
  }

  // optional string team = 6;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.team");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->team(), output);
  }

  // @@protoc_insertion_point(serialize_end:SubscribeRoom)
}

::google::protobuf::uint8* SubscribeRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscribeRoom)
  // optional bool subscribe = 1;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->subscribe(), target);
  }

  // optional string roomName = 2;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // optional int32 stateCode = 3;
  if (this->statecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->statecode(), target);
  }

  // optional .RoomDescribe roomDescribe = 4;
  if (this->has_roomdescribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->roomdescribe_, false, target);
  }

  // optional string player = 5;
  if (this->player().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player().data(), this->player().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.player");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player(), target);
  }

  // optional string team = 6;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SubscribeRoom.team");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SubscribeRoom)
  return target;
}

int SubscribeRoom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SubscribeRoom)
  int total_size = 0;

  // optional string roomName = 2;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // optional int32 stateCode = 3;
  if (this->statecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->statecode());
  }

  // optional .RoomDescribe roomDescribe = 4;
  if (this->has_roomdescribe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomdescribe_);
  }

  // optional string player = 5;
  if (this->player().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player());
  }

  // optional string team = 6;
  if (this->team().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team());
  }

  switch (v1_case()) {
    // optional bool subscribe = 1;
    case kSubscribe: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubscribeRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SubscribeRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubscribeRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubscribeRoom)
    MergeFrom(*source);
  }
}

void SubscribeRoom::MergeFrom(const SubscribeRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscribeRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.v1_case()) {
    case kSubscribe: {
      set_subscribe(from.subscribe());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.statecode() != 0) {
    set_statecode(from.statecode());
  }
  if (from.has_roomdescribe()) {
    mutable_roomdescribe()->::RoomDescribe::MergeFrom(from.roomdescribe());
  }
  if (from.player().size() > 0) {

    player_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_);
  }
  if (from.team().size() > 0) {

    team_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_);
  }
}

void SubscribeRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubscribeRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRoom::CopyFrom(const SubscribeRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscribeRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRoom::IsInitialized() const {

  return true;
}

void SubscribeRoom::Swap(SubscribeRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeRoom::InternalSwap(SubscribeRoom* other) {
  roomname_.Swap(&other->roomname_);
  std::swap(statecode_, other->statecode_);
  std::swap(roomdescribe_, other->roomdescribe_);
  player_.Swap(&other->player_);
  team_.Swap(&other->team_);
  std::swap(v1_, other->v1_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscribeRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRoom_descriptor_;
  metadata.reflection = SubscribeRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeRoom

// optional bool subscribe = 1;
bool SubscribeRoom::has_subscribe() const {
  return v1_case() == kSubscribe;
}
void SubscribeRoom::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
void SubscribeRoom::clear_subscribe() {
  if (has_subscribe()) {
    v1_.subscribe_ = false;
    clear_has_v1();
  }
}
 bool SubscribeRoom::subscribe() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.subscribe)
  if (has_subscribe()) {
    return v1_.subscribe_;
  }
  return false;
}
 void SubscribeRoom::set_subscribe(bool value) {
  if (!has_subscribe()) {
    clear_v1();
    set_has_subscribe();
  }
  v1_.subscribe_ = value;
  // @@protoc_insertion_point(field_set:SubscribeRoom.subscribe)
}

// optional string roomName = 2;
void SubscribeRoom::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SubscribeRoom::roomname() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubscribeRoom::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.roomName)
}
 void SubscribeRoom::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SubscribeRoom.roomName)
}
 void SubscribeRoom::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SubscribeRoom.roomName)
}
 ::std::string* SubscribeRoom::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubscribeRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubscribeRoom::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.roomName)
}

// optional int32 stateCode = 3;
void SubscribeRoom::clear_statecode() {
  statecode_ = 0;
}
 ::google::protobuf::int32 SubscribeRoom::statecode() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.stateCode)
  return statecode_;
}
 void SubscribeRoom::set_statecode(::google::protobuf::int32 value) {
  
  statecode_ = value;
  // @@protoc_insertion_point(field_set:SubscribeRoom.stateCode)
}

// optional .RoomDescribe roomDescribe = 4;
bool SubscribeRoom::has_roomdescribe() const {
  return !_is_default_instance_ && roomdescribe_ != NULL;
}
void SubscribeRoom::clear_roomdescribe() {
  if (GetArenaNoVirtual() == NULL && roomdescribe_ != NULL) delete roomdescribe_;
  roomdescribe_ = NULL;
}
const ::RoomDescribe& SubscribeRoom::roomdescribe() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.roomDescribe)
  return roomdescribe_ != NULL ? *roomdescribe_ : *default_instance_->roomdescribe_;
}
::RoomDescribe* SubscribeRoom::mutable_roomdescribe() {
  
  if (roomdescribe_ == NULL) {
    roomdescribe_ = new ::RoomDescribe;
  }
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.roomDescribe)
  return roomdescribe_;
}
::RoomDescribe* SubscribeRoom::release_roomdescribe() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.roomDescribe)
  
  ::RoomDescribe* temp = roomdescribe_;
  roomdescribe_ = NULL;
  return temp;
}
void SubscribeRoom::set_allocated_roomdescribe(::RoomDescribe* roomdescribe) {
  delete roomdescribe_;
  roomdescribe_ = roomdescribe;
  if (roomdescribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.roomDescribe)
}

// optional string player = 5;
void SubscribeRoom::clear_player() {
  player_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SubscribeRoom::player() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.player)
  return player_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubscribeRoom::set_player(const ::std::string& value) {
  
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.player)
}
 void SubscribeRoom::set_player(const char* value) {
  
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SubscribeRoom.player)
}
 void SubscribeRoom::set_player(const char* value, size_t size) {
  
  player_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SubscribeRoom.player)
}
 ::std::string* SubscribeRoom::mutable_player() {
  
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.player)
  return player_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubscribeRoom::release_player() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.player)
  
  return player_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubscribeRoom::set_allocated_player(::std::string* player) {
  if (player != NULL) {
    
  } else {
    
  }
  player_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player);
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.player)
}

// optional string team = 6;
void SubscribeRoom::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SubscribeRoom::team() const {
  // @@protoc_insertion_point(field_get:SubscribeRoom.team)
  return team_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubscribeRoom::set_team(const ::std::string& value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SubscribeRoom.team)
}
 void SubscribeRoom::set_team(const char* value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SubscribeRoom.team)
}
 void SubscribeRoom::set_team(const char* value, size_t size) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SubscribeRoom.team)
}
 ::std::string* SubscribeRoom::mutable_team() {
  
  // @@protoc_insertion_point(field_mutable:SubscribeRoom.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SubscribeRoom::release_team() {
  // @@protoc_insertion_point(field_release:SubscribeRoom.team)
  
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SubscribeRoom::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    
  } else {
    
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:SubscribeRoom.team)
}

bool SubscribeRoom::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
void SubscribeRoom::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
SubscribeRoom::V1Case SubscribeRoom::v1_case() const {
  return SubscribeRoom::V1Case(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomDescribe::kTeam1FieldNumber;
const int RoomDescribe::kTeam2FieldNumber;
const int RoomDescribe::kUndistributedFieldNumber;
const int RoomDescribe::kRoomNameFieldNumber;
const int RoomDescribe::kMapNameFieldNumber;
const int RoomDescribe::kGameTimeFieldNumber;
const int RoomDescribe::kMaxPlayersFieldNumber;
const int RoomDescribe::kCreatorFieldNumber;
const int RoomDescribe::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomDescribe::RoomDescribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomDescribe)
}

void RoomDescribe::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  chat_ = const_cast< ::Chat*>(&::Chat::default_instance());
}

RoomDescribe::RoomDescribe(const RoomDescribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoomDescribe)
}

void RoomDescribe::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_ = NULL;
}

RoomDescribe::~RoomDescribe() {
  // @@protoc_insertion_point(destructor:RoomDescribe)
  SharedDtor();
}

void RoomDescribe::SharedDtor() {
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete chat_;
  }
}

void RoomDescribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDescribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDescribe_descriptor_;
}

const RoomDescribe& RoomDescribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

RoomDescribe* RoomDescribe::default_instance_ = NULL;

RoomDescribe* RoomDescribe::New(::google::protobuf::Arena* arena) const {
  RoomDescribe* n = new RoomDescribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomDescribe::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomDescribe)
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxplayers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chat_ != NULL) delete chat_;
  chat_ = NULL;
  team1_.Clear();
  team2_.Clear();
  undistributed_.Clear();
}

bool RoomDescribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomDescribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TeamPlayer team1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_team1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_team1;
        if (input->ExpectTag(18)) goto parse_loop_team2;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .TeamPlayer team2 = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_team2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_team2;
        if (input->ExpectTag(26)) goto parse_loop_undistributed;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .TeamPlayer undistributed = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_undistributed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_undistributed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_undistributed;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_roomName;
        break;
      }

      // optional string roomName = 4;
      case 4: {
        if (tag == 34) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomDescribe.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mapName;
        break;
      }

      // optional string mapName = 5;
      case 5: {
        if (tag == 42) {
         parse_mapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomDescribe.mapName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gameTime;
        break;
      }

      // optional string gameTime = 6;
      case 6: {
        if (tag == 50) {
         parse_gameTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gametime().data(), this->gametime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomDescribe.gameTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_maxPlayers;
        break;
      }

      // optional string maxPlayers = 7;
      case 7: {
        if (tag == 58) {
         parse_maxPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxplayers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maxplayers().data(), this->maxplayers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomDescribe.maxPlayers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_creator;
        break;
      }

      // optional string creator = 8;
      case 8: {
        if (tag == 66) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomDescribe.creator"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_chat;
        break;
      }

      // optional .Chat chat = 9;
      case 9: {
        if (tag == 74) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomDescribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomDescribe)
  return false;
#undef DO_
}

void RoomDescribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomDescribe)
  // repeated .TeamPlayer team1 = 1;
  for (unsigned int i = 0, n = this->team1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team1(i), output);
  }

  // repeated .TeamPlayer team2 = 2;
  for (unsigned int i = 0, n = this->team2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team2(i), output);
  }

  // repeated .TeamPlayer undistributed = 3;
  for (unsigned int i = 0, n = this->undistributed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undistributed(i), output);
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  // optional string mapName = 5;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.mapName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mapname(), output);
  }

  // optional string gameTime = 6;
  if (this->gametime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gametime().data(), this->gametime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.gameTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gametime(), output);
  }

  // optional string maxPlayers = 7;
  if (this->maxplayers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxplayers().data(), this->maxplayers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.maxPlayers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->maxplayers(), output);
  }

  // optional string creator = 8;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.creator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->creator(), output);
  }

  // optional .Chat chat = 9;
  if (this->has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->chat_, output);
  }

  // @@protoc_insertion_point(serialize_end:RoomDescribe)
}

::google::protobuf::uint8* RoomDescribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomDescribe)
  // repeated .TeamPlayer team1 = 1;
  for (unsigned int i = 0, n = this->team1_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->team1(i), false, target);
  }

  // repeated .TeamPlayer team2 = 2;
  for (unsigned int i = 0, n = this->team2_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->team2(i), false, target);
  }

  // repeated .TeamPlayer undistributed = 3;
  for (unsigned int i = 0, n = this->undistributed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->undistributed(i), false, target);
  }

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // optional string mapName = 5;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.mapName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mapname(), target);
  }

  // optional string gameTime = 6;
  if (this->gametime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gametime().data(), this->gametime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.gameTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gametime(), target);
  }

  // optional string maxPlayers = 7;
  if (this->maxplayers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxplayers().data(), this->maxplayers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.maxPlayers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->maxplayers(), target);
  }

  // optional string creator = 8;
  if (this->creator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomDescribe.creator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->creator(), target);
  }

  // optional .Chat chat = 9;
  if (this->has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->chat_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RoomDescribe)
  return target;
}

int RoomDescribe::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoomDescribe)
  int total_size = 0;

  // optional string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // optional string mapName = 5;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  // optional string gameTime = 6;
  if (this->gametime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gametime());
  }

  // optional string maxPlayers = 7;
  if (this->maxplayers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maxplayers());
  }

  // optional string creator = 8;
  if (this->creator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator());
  }

  // optional .Chat chat = 9;
  if (this->has_chat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chat_);
  }

  // repeated .TeamPlayer team1 = 1;
  total_size += 1 * this->team1_size();
  for (int i = 0; i < this->team1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team1(i));
  }

  // repeated .TeamPlayer team2 = 2;
  total_size += 1 * this->team2_size();
  for (int i = 0; i < this->team2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team2(i));
  }

  // repeated .TeamPlayer undistributed = 3;
  total_size += 1 * this->undistributed_size();
  for (int i = 0; i < this->undistributed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undistributed(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDescribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomDescribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomDescribe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomDescribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomDescribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomDescribe)
    MergeFrom(*source);
  }
}

void RoomDescribe::MergeFrom(const RoomDescribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomDescribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  team1_.MergeFrom(from.team1_);
  team2_.MergeFrom(from.team2_);
  undistributed_.MergeFrom(from.undistributed_);
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
  if (from.mapname().size() > 0) {

    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  if (from.gametime().size() > 0) {

    gametime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gametime_);
  }
  if (from.maxplayers().size() > 0) {

    maxplayers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxplayers_);
  }
  if (from.creator().size() > 0) {

    creator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_);
  }
  if (from.has_chat()) {
    mutable_chat()->::Chat::MergeFrom(from.chat());
  }
}

void RoomDescribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomDescribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDescribe::CopyFrom(const RoomDescribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomDescribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDescribe::IsInitialized() const {

  return true;
}

void RoomDescribe::Swap(RoomDescribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomDescribe::InternalSwap(RoomDescribe* other) {
  team1_.UnsafeArenaSwap(&other->team1_);
  team2_.UnsafeArenaSwap(&other->team2_);
  undistributed_.UnsafeArenaSwap(&other->undistributed_);
  roomname_.Swap(&other->roomname_);
  mapname_.Swap(&other->mapname_);
  gametime_.Swap(&other->gametime_);
  maxplayers_.Swap(&other->maxplayers_);
  creator_.Swap(&other->creator_);
  std::swap(chat_, other->chat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomDescribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDescribe_descriptor_;
  metadata.reflection = RoomDescribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomDescribe

// repeated .TeamPlayer team1 = 1;
int RoomDescribe::team1_size() const {
  return team1_.size();
}
void RoomDescribe::clear_team1() {
  team1_.Clear();
}
const ::TeamPlayer& RoomDescribe::team1(int index) const {
  // @@protoc_insertion_point(field_get:RoomDescribe.team1)
  return team1_.Get(index);
}
::TeamPlayer* RoomDescribe::mutable_team1(int index) {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.team1)
  return team1_.Mutable(index);
}
::TeamPlayer* RoomDescribe::add_team1() {
  // @@protoc_insertion_point(field_add:RoomDescribe.team1)
  return team1_.Add();
}
::google::protobuf::RepeatedPtrField< ::TeamPlayer >*
RoomDescribe::mutable_team1() {
  // @@protoc_insertion_point(field_mutable_list:RoomDescribe.team1)
  return &team1_;
}
const ::google::protobuf::RepeatedPtrField< ::TeamPlayer >&
RoomDescribe::team1() const {
  // @@protoc_insertion_point(field_list:RoomDescribe.team1)
  return team1_;
}

// repeated .TeamPlayer team2 = 2;
int RoomDescribe::team2_size() const {
  return team2_.size();
}
void RoomDescribe::clear_team2() {
  team2_.Clear();
}
const ::TeamPlayer& RoomDescribe::team2(int index) const {
  // @@protoc_insertion_point(field_get:RoomDescribe.team2)
  return team2_.Get(index);
}
::TeamPlayer* RoomDescribe::mutable_team2(int index) {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.team2)
  return team2_.Mutable(index);
}
::TeamPlayer* RoomDescribe::add_team2() {
  // @@protoc_insertion_point(field_add:RoomDescribe.team2)
  return team2_.Add();
}
::google::protobuf::RepeatedPtrField< ::TeamPlayer >*
RoomDescribe::mutable_team2() {
  // @@protoc_insertion_point(field_mutable_list:RoomDescribe.team2)
  return &team2_;
}
const ::google::protobuf::RepeatedPtrField< ::TeamPlayer >&
RoomDescribe::team2() const {
  // @@protoc_insertion_point(field_list:RoomDescribe.team2)
  return team2_;
}

// repeated .TeamPlayer undistributed = 3;
int RoomDescribe::undistributed_size() const {
  return undistributed_.size();
}
void RoomDescribe::clear_undistributed() {
  undistributed_.Clear();
}
const ::TeamPlayer& RoomDescribe::undistributed(int index) const {
  // @@protoc_insertion_point(field_get:RoomDescribe.undistributed)
  return undistributed_.Get(index);
}
::TeamPlayer* RoomDescribe::mutable_undistributed(int index) {
  // @@protoc_insertion_point(field_mutable:RoomDescribe.undistributed)
  return undistributed_.Mutable(index);
}
::TeamPlayer* RoomDescribe::add_undistributed() {
  // @@protoc_insertion_point(field_add:RoomDescribe.undistributed)
  return undistributed_.Add();
}
::google::protobuf::RepeatedPtrField< ::TeamPlayer >*
RoomDescribe::mutable_undistributed() {
  // @@protoc_insertion_point(field_mutable_list:RoomDescribe.undistributed)
  return &undistributed_;
}
const ::google::protobuf::RepeatedPtrField< ::TeamPlayer >&
RoomDescribe::undistributed() const {
  // @@protoc_insertion_point(field_list:RoomDescribe.undistributed)
  return undistributed_;
}

// optional string roomName = 4;
void RoomDescribe::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomDescribe::roomname() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomDescribe.roomName)
}
 void RoomDescribe::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomDescribe.roomName)
}
 void RoomDescribe::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.roomName)
}
 ::std::string* RoomDescribe::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:RoomDescribe.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomDescribe::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomDescribe.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.roomName)
}

// optional string mapName = 5;
void RoomDescribe::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomDescribe::mapname() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.mapName)
  return mapname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_mapname(const ::std::string& value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomDescribe.mapName)
}
 void RoomDescribe::set_mapname(const char* value) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomDescribe.mapName)
}
 void RoomDescribe::set_mapname(const char* value, size_t size) {
  
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.mapName)
}
 ::std::string* RoomDescribe::mutable_mapname() {
  
  // @@protoc_insertion_point(field_mutable:RoomDescribe.mapName)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomDescribe::release_mapname() {
  // @@protoc_insertion_point(field_release:RoomDescribe.mapName)
  
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    
  } else {
    
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.mapName)
}

// optional string gameTime = 6;
void RoomDescribe::clear_gametime() {
  gametime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomDescribe::gametime() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.gameTime)
  return gametime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_gametime(const ::std::string& value) {
  
  gametime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomDescribe.gameTime)
}
 void RoomDescribe::set_gametime(const char* value) {
  
  gametime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomDescribe.gameTime)
}
 void RoomDescribe::set_gametime(const char* value, size_t size) {
  
  gametime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.gameTime)
}
 ::std::string* RoomDescribe::mutable_gametime() {
  
  // @@protoc_insertion_point(field_mutable:RoomDescribe.gameTime)
  return gametime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomDescribe::release_gametime() {
  // @@protoc_insertion_point(field_release:RoomDescribe.gameTime)
  
  return gametime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_allocated_gametime(::std::string* gametime) {
  if (gametime != NULL) {
    
  } else {
    
  }
  gametime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gametime);
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.gameTime)
}

// optional string maxPlayers = 7;
void RoomDescribe::clear_maxplayers() {
  maxplayers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomDescribe::maxplayers() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.maxPlayers)
  return maxplayers_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_maxplayers(const ::std::string& value) {
  
  maxplayers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomDescribe.maxPlayers)
}
 void RoomDescribe::set_maxplayers(const char* value) {
  
  maxplayers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomDescribe.maxPlayers)
}
 void RoomDescribe::set_maxplayers(const char* value, size_t size) {
  
  maxplayers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.maxPlayers)
}
 ::std::string* RoomDescribe::mutable_maxplayers() {
  
  // @@protoc_insertion_point(field_mutable:RoomDescribe.maxPlayers)
  return maxplayers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomDescribe::release_maxplayers() {
  // @@protoc_insertion_point(field_release:RoomDescribe.maxPlayers)
  
  return maxplayers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_allocated_maxplayers(::std::string* maxplayers) {
  if (maxplayers != NULL) {
    
  } else {
    
  }
  maxplayers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxplayers);
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.maxPlayers)
}

// optional string creator = 8;
void RoomDescribe::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomDescribe::creator() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.creator)
  return creator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_creator(const ::std::string& value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomDescribe.creator)
}
 void RoomDescribe::set_creator(const char* value) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomDescribe.creator)
}
 void RoomDescribe::set_creator(const char* value, size_t size) {
  
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomDescribe.creator)
}
 ::std::string* RoomDescribe::mutable_creator() {
  
  // @@protoc_insertion_point(field_mutable:RoomDescribe.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomDescribe::release_creator() {
  // @@protoc_insertion_point(field_release:RoomDescribe.creator)
  
  return creator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomDescribe::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    
  } else {
    
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.creator)
}

// optional .Chat chat = 9;
bool RoomDescribe::has_chat() const {
  return !_is_default_instance_ && chat_ != NULL;
}
void RoomDescribe::clear_chat() {
  if (GetArenaNoVirtual() == NULL && chat_ != NULL) delete chat_;
  chat_ = NULL;
}
const ::Chat& RoomDescribe::chat() const {
  // @@protoc_insertion_point(field_get:RoomDescribe.chat)
  return chat_ != NULL ? *chat_ : *default_instance_->chat_;
}
::Chat* RoomDescribe::mutable_chat() {
  
  if (chat_ == NULL) {
    chat_ = new ::Chat;
  }
  // @@protoc_insertion_point(field_mutable:RoomDescribe.chat)
  return chat_;
}
::Chat* RoomDescribe::release_chat() {
  // @@protoc_insertion_point(field_release:RoomDescribe.chat)
  
  ::Chat* temp = chat_;
  chat_ = NULL;
  return temp;
}
void RoomDescribe::set_allocated_chat(::Chat* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RoomDescribe.chat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamPlayer::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamPlayer::TeamPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamPlayer)
}

void TeamPlayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TeamPlayer::TeamPlayer(const TeamPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TeamPlayer)
}

void TeamPlayer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TeamPlayer::~TeamPlayer() {
  // @@protoc_insertion_point(destructor:TeamPlayer)
  SharedDtor();
}

void TeamPlayer::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TeamPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPlayer_descriptor_;
}

const TeamPlayer& TeamPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

TeamPlayer* TeamPlayer::default_instance_ = NULL;

TeamPlayer* TeamPlayer::New(::google::protobuf::Arena* arena) const {
  TeamPlayer* n = new TeamPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamPlayer)
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TeamPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TeamPlayer.player_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamPlayer)
  return false;
#undef DO_
}

void TeamPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamPlayer)
  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TeamPlayer.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:TeamPlayer)
}

::google::protobuf::uint8* TeamPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamPlayer)
  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TeamPlayer.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TeamPlayer)
  return target;
}

int TeamPlayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TeamPlayer)
  int total_size = 0;

  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamPlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TeamPlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamPlayer)
    MergeFrom(*source);
  }
}

void TeamPlayer::MergeFrom(const TeamPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamPlayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
}

void TeamPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPlayer::CopyFrom(const TeamPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPlayer::IsInitialized() const {

  return true;
}

void TeamPlayer::Swap(TeamPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamPlayer::InternalSwap(TeamPlayer* other) {
  player_name_.Swap(&other->player_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPlayer_descriptor_;
  metadata.reflection = TeamPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamPlayer

// optional string player_name = 1;
void TeamPlayer::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TeamPlayer::player_name() const {
  // @@protoc_insertion_point(field_get:TeamPlayer.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamPlayer::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamPlayer.player_name)
}
 void TeamPlayer::set_player_name(const char* value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamPlayer.player_name)
}
 void TeamPlayer::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamPlayer.player_name)
}
 ::std::string* TeamPlayer::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:TeamPlayer.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeamPlayer::release_player_name() {
  // @@protoc_insertion_point(field_release:TeamPlayer.player_name)
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamPlayer::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:TeamPlayer.player_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomUpdate::kRoomDescribeFieldNumber;
const int RoomUpdate::kTargetTeamFieldNumber;
const int RoomUpdate::kRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomUpdate::RoomUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomUpdate)
}

void RoomUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  roomdescribe_ = const_cast< ::RoomDescribe*>(&::RoomDescribe::default_instance());
}

RoomUpdate::RoomUpdate(const RoomUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoomUpdate)
}

void RoomUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomdescribe_ = NULL;
  targetteam_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomUpdate::~RoomUpdate() {
  // @@protoc_insertion_point(destructor:RoomUpdate)
  SharedDtor();
}

void RoomUpdate::SharedDtor() {
  targetteam_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete roomdescribe_;
  }
}

void RoomUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomUpdate_descriptor_;
}

const RoomUpdate& RoomUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameRoomModels_2eproto();
  return *default_instance_;
}

RoomUpdate* RoomUpdate::default_instance_ = NULL;

RoomUpdate* RoomUpdate::New(::google::protobuf::Arena* arena) const {
  RoomUpdate* n = new RoomUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomUpdate)
  if (GetArenaNoVirtual() == NULL && roomdescribe_ != NULL) delete roomdescribe_;
  roomdescribe_ = NULL;
  targetteam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RoomUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoomDescribe roomDescribe = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdescribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetTeam;
        break;
      }

      // optional string targetTeam = 2;
      case 2: {
        if (tag == 18) {
         parse_targetTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetteam()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->targetteam().data(), this->targetteam().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomUpdate.targetTeam"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomName;
        break;
      }

      // optional string roomName = 3;
      case 3: {
        if (tag == 26) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RoomUpdate.roomName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomUpdate)
  return false;
#undef DO_
}

void RoomUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomUpdate)
  // optional .RoomDescribe roomDescribe = 1;
  if (this->has_roomdescribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->roomdescribe_, output);
  }

  // optional string targetTeam = 2;
  if (this->targetteam().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetteam().data(), this->targetteam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomUpdate.targetTeam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->targetteam(), output);
  }

  // optional string roomName = 3;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomUpdate.roomName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomname(), output);
  }

  // @@protoc_insertion_point(serialize_end:RoomUpdate)
}

::google::protobuf::uint8* RoomUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomUpdate)
  // optional .RoomDescribe roomDescribe = 1;
  if (this->has_roomdescribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->roomdescribe_, false, target);
  }

  // optional string targetTeam = 2;
  if (this->targetteam().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->targetteam().data(), this->targetteam().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomUpdate.targetTeam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->targetteam(), target);
  }

  // optional string roomName = 3;
  if (this->roomname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RoomUpdate.roomName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RoomUpdate)
  return target;
}

int RoomUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoomUpdate)
  int total_size = 0;

  // optional .RoomDescribe roomDescribe = 1;
  if (this->has_roomdescribe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomdescribe_);
  }

  // optional string targetTeam = 2;
  if (this->targetteam().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->targetteam());
  }

  // optional string roomName = 3;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomUpdate)
    MergeFrom(*source);
  }
}

void RoomUpdate::MergeFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_roomdescribe()) {
    mutable_roomdescribe()->::RoomDescribe::MergeFrom(from.roomdescribe());
  }
  if (from.targetteam().size() > 0) {

    targetteam_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetteam_);
  }
  if (from.roomname().size() > 0) {

    roomname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomname_);
  }
}

void RoomUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUpdate::CopyFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUpdate::IsInitialized() const {

  return true;
}

void RoomUpdate::Swap(RoomUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomUpdate::InternalSwap(RoomUpdate* other) {
  std::swap(roomdescribe_, other->roomdescribe_);
  targetteam_.Swap(&other->targetteam_);
  roomname_.Swap(&other->roomname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomUpdate_descriptor_;
  metadata.reflection = RoomUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomUpdate

// optional .RoomDescribe roomDescribe = 1;
bool RoomUpdate::has_roomdescribe() const {
  return !_is_default_instance_ && roomdescribe_ != NULL;
}
void RoomUpdate::clear_roomdescribe() {
  if (GetArenaNoVirtual() == NULL && roomdescribe_ != NULL) delete roomdescribe_;
  roomdescribe_ = NULL;
}
const ::RoomDescribe& RoomUpdate::roomdescribe() const {
  // @@protoc_insertion_point(field_get:RoomUpdate.roomDescribe)
  return roomdescribe_ != NULL ? *roomdescribe_ : *default_instance_->roomdescribe_;
}
::RoomDescribe* RoomUpdate::mutable_roomdescribe() {
  
  if (roomdescribe_ == NULL) {
    roomdescribe_ = new ::RoomDescribe;
  }
  // @@protoc_insertion_point(field_mutable:RoomUpdate.roomDescribe)
  return roomdescribe_;
}
::RoomDescribe* RoomUpdate::release_roomdescribe() {
  // @@protoc_insertion_point(field_release:RoomUpdate.roomDescribe)
  
  ::RoomDescribe* temp = roomdescribe_;
  roomdescribe_ = NULL;
  return temp;
}
void RoomUpdate::set_allocated_roomdescribe(::RoomDescribe* roomdescribe) {
  delete roomdescribe_;
  roomdescribe_ = roomdescribe;
  if (roomdescribe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RoomUpdate.roomDescribe)
}

// optional string targetTeam = 2;
void RoomUpdate::clear_targetteam() {
  targetteam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomUpdate::targetteam() const {
  // @@protoc_insertion_point(field_get:RoomUpdate.targetTeam)
  return targetteam_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomUpdate::set_targetteam(const ::std::string& value) {
  
  targetteam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomUpdate.targetTeam)
}
 void RoomUpdate::set_targetteam(const char* value) {
  
  targetteam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomUpdate.targetTeam)
}
 void RoomUpdate::set_targetteam(const char* value, size_t size) {
  
  targetteam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomUpdate.targetTeam)
}
 ::std::string* RoomUpdate::mutable_targetteam() {
  
  // @@protoc_insertion_point(field_mutable:RoomUpdate.targetTeam)
  return targetteam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomUpdate::release_targetteam() {
  // @@protoc_insertion_point(field_release:RoomUpdate.targetTeam)
  
  return targetteam_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomUpdate::set_allocated_targetteam(::std::string* targetteam) {
  if (targetteam != NULL) {
    
  } else {
    
  }
  targetteam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetteam);
  // @@protoc_insertion_point(field_set_allocated:RoomUpdate.targetTeam)
}

// optional string roomName = 3;
void RoomUpdate::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomUpdate::roomname() const {
  // @@protoc_insertion_point(field_get:RoomUpdate.roomName)
  return roomname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomUpdate::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomUpdate.roomName)
}
 void RoomUpdate::set_roomname(const char* value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomUpdate.roomName)
}
 void RoomUpdate::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomUpdate.roomName)
}
 ::std::string* RoomUpdate::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:RoomUpdate.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomUpdate::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomUpdate.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomUpdate::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:RoomUpdate.roomName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
