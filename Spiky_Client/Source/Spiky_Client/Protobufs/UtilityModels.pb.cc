// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UtilityModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UtilityModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Utility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Utility_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UtilityModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_UtilityModels_2eproto() {
  protobuf_AddDesc_UtilityModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UtilityModels.proto");
  GOOGLE_CHECK(file != NULL);
  Utility_descriptor_ = file->message_type(0);
  static const int Utility_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utility, alive_),
  };
  Utility_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Utility_descriptor_,
      Utility::default_instance_,
      Utility_offsets_,
      -1,
      -1,
      -1,
      sizeof(Utility),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utility, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utility, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UtilityModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Utility_descriptor_, &Utility::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UtilityModels_2eproto() {
  delete Utility::default_instance_;
  delete Utility_reflection_;
}

void protobuf_AddDesc_UtilityModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_UtilityModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DisableWarnings_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023UtilityModels.proto\032\025DisableWarnings.p"
    "roto\"\030\n\007Utility\022\r\n\005alive\030\001 \001(\010B-\n\034com.sp"
    "iky.server.protomodelsB\rUtilityModelsb\006p"
    "roto3", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UtilityModels.proto", &protobuf_RegisterTypes);
  Utility::default_instance_ = new Utility();
  Utility::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UtilityModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UtilityModels_2eproto {
  StaticDescriptorInitializer_UtilityModels_2eproto() {
    protobuf_AddDesc_UtilityModels_2eproto();
  }
} static_descriptor_initializer_UtilityModels_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Utility::kAliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Utility::Utility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Utility)
}

void Utility::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Utility::Utility(const Utility& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Utility)
}

void Utility::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  alive_ = false;
}

Utility::~Utility() {
  // @@protoc_insertion_point(destructor:Utility)
  SharedDtor();
}

void Utility::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Utility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Utility_descriptor_;
}

const Utility& Utility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UtilityModels_2eproto();
  return *default_instance_;
}

Utility* Utility::default_instance_ = NULL;

Utility* Utility::New(::google::protobuf::Arena* arena) const {
  Utility* n = new Utility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Utility::Clear() {
// @@protoc_insertion_point(message_clear_start:Utility)
  alive_ = false;
}

bool Utility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Utility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool alive = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Utility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Utility)
  return false;
#undef DO_
}

void Utility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Utility)
  // optional bool alive = 1;
  if (this->alive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->alive(), output);
  }

  // @@protoc_insertion_point(serialize_end:Utility)
}

::google::protobuf::uint8* Utility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Utility)
  // optional bool alive = 1;
  if (this->alive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->alive(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Utility)
  return target;
}

int Utility::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Utility)
  int total_size = 0;

  // optional bool alive = 1;
  if (this->alive() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Utility)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Utility* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Utility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Utility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Utility)
    MergeFrom(*source);
  }
}

void Utility::MergeFrom(const Utility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Utility)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.alive() != 0) {
    set_alive(from.alive());
  }
}

void Utility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Utility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utility::CopyFrom(const Utility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Utility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utility::IsInitialized() const {

  return true;
}

void Utility::Swap(Utility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utility::InternalSwap(Utility* other) {
  std::swap(alive_, other->alive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Utility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Utility_descriptor_;
  metadata.reflection = Utility_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Utility

// optional bool alive = 1;
void Utility::clear_alive() {
  alive_ = false;
}
 bool Utility::alive() const {
  // @@protoc_insertion_point(field_get:Utility.alive)
  return alive_;
}
 void Utility::set_alive(bool value) {
  
  alive_ = value;
  // @@protoc_insertion_point(field_set:Utility.alive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
