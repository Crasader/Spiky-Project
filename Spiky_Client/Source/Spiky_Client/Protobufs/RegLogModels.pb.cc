// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegLogModels.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RegLogModels.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* InputChecking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputChecking_reflection_ = NULL;
struct InputCheckingOneofInstance {
  bool logincheckstatus_;
  bool mailcheckstatus_;
  bool captchacheckstatus_;
}* InputChecking_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
struct LoginOneofInstance {
  ::google::protobuf::int32 statecode_;
}* Login_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Registration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Registration_reflection_ = NULL;
struct RegistrationOneofInstance {
  ::google::protobuf::int32 statecode_;
}* Registration_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InitialState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitialState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RegLogModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_RegLogModels_2eproto() {
  protobuf_AddDesc_RegLogModels_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RegLogModels.proto");
  GOOGLE_CHECK(file != NULL);
  InputChecking_descriptor_ = file->message_type(0);
  static const int InputChecking_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, captcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, getcaptcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, captchadata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InputChecking_default_oneof_instance_, logincheckstatus_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InputChecking_default_oneof_instance_, mailcheckstatus_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InputChecking_default_oneof_instance_, captchacheckstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, v1_),
  };
  InputChecking_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputChecking_descriptor_,
      InputChecking::default_instance_,
      InputChecking_offsets_,
      -1,
      -1,
      -1,
      InputChecking_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, _oneof_case_[0]),
      sizeof(InputChecking),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputChecking, _is_default_instance_));
  Login_descriptor_ = file->message_type(1);
  static const int Login_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, publickey_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Login_default_oneof_instance_, statecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, v1_),
  };
  Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      -1,
      -1,
      -1,
      Login_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _oneof_case_[0]),
      sizeof(Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _is_default_instance_));
  Registration_descriptor_ = file->message_type(2);
  static const int Registration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, captcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, publickey_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Registration_default_oneof_instance_, statecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, v1_),
  };
  Registration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Registration_descriptor_,
      Registration::default_instance_,
      Registration_offsets_,
      -1,
      -1,
      -1,
      Registration_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, _oneof_case_[0]),
      sizeof(Registration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Registration, _is_default_instance_));
  InitialState_descriptor_ = file->message_type(3);
  static const int InitialState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialState, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialState, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialState, createroom_),
  };
  InitialState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InitialState_descriptor_,
      InitialState::default_instance_,
      InitialState_offsets_,
      -1,
      -1,
      -1,
      sizeof(InitialState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialState, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RegLogModels_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputChecking_descriptor_, &InputChecking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Registration_descriptor_, &Registration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InitialState_descriptor_, &InitialState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RegLogModels_2eproto() {
  delete InputChecking::default_instance_;
  delete InputChecking_default_oneof_instance_;
  delete InputChecking_reflection_;
  delete Login::default_instance_;
  delete Login_default_oneof_instance_;
  delete Login_reflection_;
  delete Registration::default_instance_;
  delete Registration_default_oneof_instance_;
  delete Registration_reflection_;
  delete InitialState::default_instance_;
  delete InitialState_reflection_;
}

void protobuf_AddDesc_RegLogModels_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_RegLogModels_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_DisableWarnings_2eproto();
  ::protobuf_AddDesc_GameRoomModels_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RegLogModels.proto\032\025DisableWarnings.pr"
    "oto\032\024GameRoomModels.proto\"\301\001\n\rInputCheck"
    "ing\022\r\n\005login\030\001 \001(\t\022\014\n\004mail\030\002 \001(\t\022\017\n\007capt"
    "cha\030\003 \001(\t\022\022\n\ngetCaptcha\030\004 \001(\010\022\023\n\013captcha"
    "Data\030\005 \001(\014\022\032\n\020loginCheckStatus\030\006 \001(\010H\000\022\031"
    "\n\017mailCheckStatus\030\007 \001(\010H\000\022\034\n\022captchaChec"
    "kStatus\030\010 \001(\010H\000B\004\n\002v1\"Q\n\005Login\022\014\n\004mail\030\001"
    " \001(\t\022\014\n\004hash\030\002 \001(\t\022\021\n\tpublicKey\030\003 \001(\t\022\023\n"
    "\tstateCode\030\004 \001(\005H\000B\004\n\002v1\"x\n\014Registration"
    "\022\r\n\005login\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t\022\014\n\004mail\030\003 "
    "\001(\t\022\017\n\007captcha\030\004 \001(\t\022\021\n\tpublicKey\030\005 \001(\t\022"
    "\023\n\tstateCode\030\006 \001(\005H\000B\004\n\002v1\"Q\n\014InitialSta"
    "te\022\021\n\tsessionId\030\001 \001(\t\022\r\n\005login\030\002 \001(\t\022\037\n\n"
    "createRoom\030\003 \003(\0132\013.CreateRoomB7\n\034com.spi"
    "ky.server.protomodelsB\027RegistrationLogin"
    "Modelsb\006proto3", 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RegLogModels.proto", &protobuf_RegisterTypes);
  InputChecking::default_instance_ = new InputChecking();
  InputChecking_default_oneof_instance_ = new InputCheckingOneofInstance();
  Login::default_instance_ = new Login();
  Login_default_oneof_instance_ = new LoginOneofInstance();
  Registration::default_instance_ = new Registration();
  Registration_default_oneof_instance_ = new RegistrationOneofInstance();
  InitialState::default_instance_ = new InitialState();
  InputChecking::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  Registration::default_instance_->InitAsDefaultInstance();
  InitialState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RegLogModels_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RegLogModels_2eproto {
  StaticDescriptorInitializer_RegLogModels_2eproto() {
    protobuf_AddDesc_RegLogModels_2eproto();
  }
} static_descriptor_initializer_RegLogModels_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputChecking::kLoginFieldNumber;
const int InputChecking::kMailFieldNumber;
const int InputChecking::kCaptchaFieldNumber;
const int InputChecking::kGetCaptchaFieldNumber;
const int InputChecking::kCaptchaDataFieldNumber;
const int InputChecking::kLoginCheckStatusFieldNumber;
const int InputChecking::kMailCheckStatusFieldNumber;
const int InputChecking::kCaptchaCheckStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputChecking::InputChecking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InputChecking)
}

void InputChecking::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  InputChecking_default_oneof_instance_->logincheckstatus_ = false;
  InputChecking_default_oneof_instance_->mailcheckstatus_ = false;
  InputChecking_default_oneof_instance_->captchacheckstatus_ = false;
}

InputChecking::InputChecking(const InputChecking& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InputChecking)
}

void InputChecking::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  getcaptcha_ = false;
  captchadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

InputChecking::~InputChecking() {
  // @@protoc_insertion_point(destructor:InputChecking)
  SharedDtor();
}

void InputChecking::SharedDtor() {
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captchadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
  if (this != default_instance_) {
  }
}

void InputChecking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputChecking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputChecking_descriptor_;
}

const InputChecking& InputChecking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegLogModels_2eproto();
  return *default_instance_;
}

InputChecking* InputChecking::default_instance_ = NULL;

InputChecking* InputChecking::New(::google::protobuf::Arena* arena) const {
  InputChecking* n = new InputChecking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputChecking::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:InputChecking)
  switch(v1_case()) {
    case kLoginCheckStatus: {
      // No need to clear
      break;
    }
    case kMailCheckStatus: {
      // No need to clear
      break;
    }
    case kCaptchaCheckStatus: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void InputChecking::Clear() {
// @@protoc_insertion_point(message_clear_start:InputChecking)
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  getcaptcha_ = false;
  captchadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_v1();
}

bool InputChecking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InputChecking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InputChecking.login"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional string mail = 2;
      case 2: {
        if (tag == 18) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mail().data(), this->mail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InputChecking.mail"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_captcha;
        break;
      }

      // optional string captcha = 3;
      case 3: {
        if (tag == 26) {
         parse_captcha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captcha()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->captcha().data(), this->captcha().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InputChecking.captcha"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_getCaptcha;
        break;
      }

      // optional bool getCaptcha = 4;
      case 4: {
        if (tag == 32) {
         parse_getCaptcha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getcaptcha_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_captchaData;
        break;
      }

      // optional bytes captchaData = 5;
      case 5: {
        if (tag == 42) {
         parse_captchaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_captchadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loginCheckStatus;
        break;
      }

      // optional bool loginCheckStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_loginCheckStatus:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v1_.logincheckstatus_)));
          set_has_logincheckstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mailCheckStatus;
        break;
      }

      // optional bool mailCheckStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_mailCheckStatus:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v1_.mailcheckstatus_)));
          set_has_mailcheckstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_captchaCheckStatus;
        break;
      }

      // optional bool captchaCheckStatus = 8;
      case 8: {
        if (tag == 64) {
         parse_captchaCheckStatus:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v1_.captchacheckstatus_)));
          set_has_captchacheckstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InputChecking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InputChecking)
  return false;
#undef DO_
}

void InputChecking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InputChecking)
  // optional string login = 1;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InputChecking.login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string mail = 2;
  if (this->mail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InputChecking.mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mail(), output);
  }

  // optional string captcha = 3;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), this->captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InputChecking.captcha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->captcha(), output);
  }

  // optional bool getCaptcha = 4;
  if (this->getcaptcha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->getcaptcha(), output);
  }

  // optional bytes captchaData = 5;
  if (this->captchadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->captchadata(), output);
  }

  // optional bool loginCheckStatus = 6;
  if (has_logincheckstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->logincheckstatus(), output);
  }

  // optional bool mailCheckStatus = 7;
  if (has_mailcheckstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mailcheckstatus(), output);
  }

  // optional bool captchaCheckStatus = 8;
  if (has_captchacheckstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->captchacheckstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:InputChecking)
}

::google::protobuf::uint8* InputChecking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InputChecking)
  // optional string login = 1;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InputChecking.login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string mail = 2;
  if (this->mail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InputChecking.mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mail(), target);
  }

  // optional string captcha = 3;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), this->captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InputChecking.captcha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->captcha(), target);
  }

  // optional bool getCaptcha = 4;
  if (this->getcaptcha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->getcaptcha(), target);
  }

  // optional bytes captchaData = 5;
  if (this->captchadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->captchadata(), target);
  }

  // optional bool loginCheckStatus = 6;
  if (has_logincheckstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->logincheckstatus(), target);
  }

  // optional bool mailCheckStatus = 7;
  if (has_mailcheckstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->mailcheckstatus(), target);
  }

  // optional bool captchaCheckStatus = 8;
  if (has_captchacheckstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->captchacheckstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InputChecking)
  return target;
}

int InputChecking::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InputChecking)
  int total_size = 0;

  // optional string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login());
  }

  // optional string mail = 2;
  if (this->mail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mail());
  }

  // optional string captcha = 3;
  if (this->captcha().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());
  }

  // optional bool getCaptcha = 4;
  if (this->getcaptcha() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes captchaData = 5;
  if (this->captchadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->captchadata());
  }

  switch (v1_case()) {
    // optional bool loginCheckStatus = 6;
    case kLoginCheckStatus: {
      total_size += 1 + 1;
      break;
    }
    // optional bool mailCheckStatus = 7;
    case kMailCheckStatus: {
      total_size += 1 + 1;
      break;
    }
    // optional bool captchaCheckStatus = 8;
    case kCaptchaCheckStatus: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputChecking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputChecking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InputChecking* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputChecking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputChecking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputChecking)
    MergeFrom(*source);
  }
}

void InputChecking::MergeFrom(const InputChecking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputChecking)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.v1_case()) {
    case kLoginCheckStatus: {
      set_logincheckstatus(from.logincheckstatus());
      break;
    }
    case kMailCheckStatus: {
      set_mailcheckstatus(from.mailcheckstatus());
      break;
    }
    case kCaptchaCheckStatus: {
      set_captchacheckstatus(from.captchacheckstatus());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.mail().size() > 0) {

    mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_);
  }
  if (from.captcha().size() > 0) {

    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  if (from.getcaptcha() != 0) {
    set_getcaptcha(from.getcaptcha());
  }
  if (from.captchadata().size() > 0) {

    captchadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captchadata_);
  }
}

void InputChecking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputChecking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputChecking::CopyFrom(const InputChecking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputChecking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputChecking::IsInitialized() const {

  return true;
}

void InputChecking::Swap(InputChecking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputChecking::InternalSwap(InputChecking* other) {
  login_.Swap(&other->login_);
  mail_.Swap(&other->mail_);
  captcha_.Swap(&other->captcha_);
  std::swap(getcaptcha_, other->getcaptcha_);
  captchadata_.Swap(&other->captchadata_);
  std::swap(v1_, other->v1_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputChecking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputChecking_descriptor_;
  metadata.reflection = InputChecking_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputChecking

// optional string login = 1;
void InputChecking::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InputChecking::login() const {
  // @@protoc_insertion_point(field_get:InputChecking.login)
  return login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InputChecking.login)
}
 void InputChecking::set_login(const char* value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InputChecking.login)
}
 void InputChecking::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InputChecking.login)
}
 ::std::string* InputChecking::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:InputChecking.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InputChecking::release_login() {
  // @@protoc_insertion_point(field_release:InputChecking.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:InputChecking.login)
}

// optional string mail = 2;
void InputChecking::clear_mail() {
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InputChecking::mail() const {
  // @@protoc_insertion_point(field_get:InputChecking.mail)
  return mail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_mail(const ::std::string& value) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InputChecking.mail)
}
 void InputChecking::set_mail(const char* value) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InputChecking.mail)
}
 void InputChecking::set_mail(const char* value, size_t size) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InputChecking.mail)
}
 ::std::string* InputChecking::mutable_mail() {
  
  // @@protoc_insertion_point(field_mutable:InputChecking.mail)
  return mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InputChecking::release_mail() {
  // @@protoc_insertion_point(field_release:InputChecking.mail)
  
  return mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    
  } else {
    
  }
  mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail);
  // @@protoc_insertion_point(field_set_allocated:InputChecking.mail)
}

// optional string captcha = 3;
void InputChecking::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InputChecking::captcha() const {
  // @@protoc_insertion_point(field_get:InputChecking.captcha)
  return captcha_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_captcha(const ::std::string& value) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InputChecking.captcha)
}
 void InputChecking::set_captcha(const char* value) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InputChecking.captcha)
}
 void InputChecking::set_captcha(const char* value, size_t size) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InputChecking.captcha)
}
 ::std::string* InputChecking::mutable_captcha() {
  
  // @@protoc_insertion_point(field_mutable:InputChecking.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InputChecking::release_captcha() {
  // @@protoc_insertion_point(field_release:InputChecking.captcha)
  
  return captcha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    
  } else {
    
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:InputChecking.captcha)
}

// optional bool getCaptcha = 4;
void InputChecking::clear_getcaptcha() {
  getcaptcha_ = false;
}
 bool InputChecking::getcaptcha() const {
  // @@protoc_insertion_point(field_get:InputChecking.getCaptcha)
  return getcaptcha_;
}
 void InputChecking::set_getcaptcha(bool value) {
  
  getcaptcha_ = value;
  // @@protoc_insertion_point(field_set:InputChecking.getCaptcha)
}

// optional bytes captchaData = 5;
void InputChecking::clear_captchadata() {
  captchadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InputChecking::captchadata() const {
  // @@protoc_insertion_point(field_get:InputChecking.captchaData)
  return captchadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_captchadata(const ::std::string& value) {
  
  captchadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InputChecking.captchaData)
}
 void InputChecking::set_captchadata(const char* value) {
  
  captchadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InputChecking.captchaData)
}
 void InputChecking::set_captchadata(const void* value, size_t size) {
  
  captchadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InputChecking.captchaData)
}
 ::std::string* InputChecking::mutable_captchadata() {
  
  // @@protoc_insertion_point(field_mutable:InputChecking.captchaData)
  return captchadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InputChecking::release_captchadata() {
  // @@protoc_insertion_point(field_release:InputChecking.captchaData)
  
  return captchadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputChecking::set_allocated_captchadata(::std::string* captchadata) {
  if (captchadata != NULL) {
    
  } else {
    
  }
  captchadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captchadata);
  // @@protoc_insertion_point(field_set_allocated:InputChecking.captchaData)
}

// optional bool loginCheckStatus = 6;
bool InputChecking::has_logincheckstatus() const {
  return v1_case() == kLoginCheckStatus;
}
void InputChecking::set_has_logincheckstatus() {
  _oneof_case_[0] = kLoginCheckStatus;
}
void InputChecking::clear_logincheckstatus() {
  if (has_logincheckstatus()) {
    v1_.logincheckstatus_ = false;
    clear_has_v1();
  }
}
 bool InputChecking::logincheckstatus() const {
  // @@protoc_insertion_point(field_get:InputChecking.loginCheckStatus)
  if (has_logincheckstatus()) {
    return v1_.logincheckstatus_;
  }
  return false;
}
 void InputChecking::set_logincheckstatus(bool value) {
  if (!has_logincheckstatus()) {
    clear_v1();
    set_has_logincheckstatus();
  }
  v1_.logincheckstatus_ = value;
  // @@protoc_insertion_point(field_set:InputChecking.loginCheckStatus)
}

// optional bool mailCheckStatus = 7;
bool InputChecking::has_mailcheckstatus() const {
  return v1_case() == kMailCheckStatus;
}
void InputChecking::set_has_mailcheckstatus() {
  _oneof_case_[0] = kMailCheckStatus;
}
void InputChecking::clear_mailcheckstatus() {
  if (has_mailcheckstatus()) {
    v1_.mailcheckstatus_ = false;
    clear_has_v1();
  }
}
 bool InputChecking::mailcheckstatus() const {
  // @@protoc_insertion_point(field_get:InputChecking.mailCheckStatus)
  if (has_mailcheckstatus()) {
    return v1_.mailcheckstatus_;
  }
  return false;
}
 void InputChecking::set_mailcheckstatus(bool value) {
  if (!has_mailcheckstatus()) {
    clear_v1();
    set_has_mailcheckstatus();
  }
  v1_.mailcheckstatus_ = value;
  // @@protoc_insertion_point(field_set:InputChecking.mailCheckStatus)
}

// optional bool captchaCheckStatus = 8;
bool InputChecking::has_captchacheckstatus() const {
  return v1_case() == kCaptchaCheckStatus;
}
void InputChecking::set_has_captchacheckstatus() {
  _oneof_case_[0] = kCaptchaCheckStatus;
}
void InputChecking::clear_captchacheckstatus() {
  if (has_captchacheckstatus()) {
    v1_.captchacheckstatus_ = false;
    clear_has_v1();
  }
}
 bool InputChecking::captchacheckstatus() const {
  // @@protoc_insertion_point(field_get:InputChecking.captchaCheckStatus)
  if (has_captchacheckstatus()) {
    return v1_.captchacheckstatus_;
  }
  return false;
}
 void InputChecking::set_captchacheckstatus(bool value) {
  if (!has_captchacheckstatus()) {
    clear_v1();
    set_has_captchacheckstatus();
  }
  v1_.captchacheckstatus_ = value;
  // @@protoc_insertion_point(field_set:InputChecking.captchaCheckStatus)
}

bool InputChecking::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
void InputChecking::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
InputChecking::V1Case InputChecking::v1_case() const {
  return InputChecking::V1Case(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kMailFieldNumber;
const int Login::kHashFieldNumber;
const int Login::kPublicKeyFieldNumber;
const int Login::kStateCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login)
}

void Login::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Login_default_oneof_instance_->statecode_ = 0;
}

Login::Login(const Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login)
}

void Login::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Login)
  SharedDtor();
}

void Login::SharedDtor() {
  mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegLogModels_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:Login)
  switch(v1_case()) {
    case kStateCode: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Login)
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_v1();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mail = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mail().data(), this->mail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.mail"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional string hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publicKey;
        break;
      }

      // optional string publicKey = 3;
      case 3: {
        if (tag == 26) {
         parse_publicKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Login.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stateCode;
        break;
      }

      // optional int32 stateCode = 4;
      case 4: {
        if (tag == 32) {
         parse_stateCode:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v1_.statecode_)));
          set_has_statecode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login)
  // optional string mail = 1;
  if (this->mail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mail(), output);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // optional string publicKey = 3;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->publickey(), output);
  }

  // optional int32 stateCode = 4;
  if (has_statecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->statecode(), output);
  }

  // @@protoc_insertion_point(serialize_end:Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login)
  // optional string mail = 1;
  if (this->mail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mail(), target);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // optional string publicKey = 3;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Login.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->publickey(), target);
  }

  // optional int32 stateCode = 4;
  if (has_statecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->statecode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Login)
  return target;
}

int Login::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Login)
  int total_size = 0;

  // optional string mail = 1;
  if (this->mail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mail());
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional string publicKey = 3;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  switch (v1_case()) {
    // optional int32 stateCode = 4;
    case kStateCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.v1_case()) {
    case kStateCode: {
      set_statecode(from.statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (from.mail().size() > 0) {

    mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  mail_.Swap(&other->mail_);
  hash_.Swap(&other->hash_);
  publickey_.Swap(&other->publickey_);
  std::swap(v1_, other->v1_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// optional string mail = 1;
void Login::clear_mail() {
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::mail() const {
  // @@protoc_insertion_point(field_get:Login.mail)
  return mail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_mail(const ::std::string& value) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.mail)
}
 void Login::set_mail(const char* value) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.mail)
}
 void Login::set_mail(const char* value, size_t size) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.mail)
}
 ::std::string* Login::mutable_mail() {
  
  // @@protoc_insertion_point(field_mutable:Login.mail)
  return mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_mail() {
  // @@protoc_insertion_point(field_release:Login.mail)
  
  return mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    
  } else {
    
  }
  mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail);
  // @@protoc_insertion_point(field_set_allocated:Login.mail)
}

// optional string hash = 2;
void Login::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::hash() const {
  // @@protoc_insertion_point(field_get:Login.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.hash)
}
 void Login::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.hash)
}
 void Login::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.hash)
}
 ::std::string* Login::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:Login.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_hash() {
  // @@protoc_insertion_point(field_release:Login.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Login.hash)
}

// optional string publicKey = 3;
void Login::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::publickey() const {
  // @@protoc_insertion_point(field_get:Login.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.publicKey)
}
 void Login::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.publicKey)
}
 void Login::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.publicKey)
}
 ::std::string* Login::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Login.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_publickey() {
  // @@protoc_insertion_point(field_release:Login.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Login.publicKey)
}

// optional int32 stateCode = 4;
bool Login::has_statecode() const {
  return v1_case() == kStateCode;
}
void Login::set_has_statecode() {
  _oneof_case_[0] = kStateCode;
}
void Login::clear_statecode() {
  if (has_statecode()) {
    v1_.statecode_ = 0;
    clear_has_v1();
  }
}
 ::google::protobuf::int32 Login::statecode() const {
  // @@protoc_insertion_point(field_get:Login.stateCode)
  if (has_statecode()) {
    return v1_.statecode_;
  }
  return 0;
}
 void Login::set_statecode(::google::protobuf::int32 value) {
  if (!has_statecode()) {
    clear_v1();
    set_has_statecode();
  }
  v1_.statecode_ = value;
  // @@protoc_insertion_point(field_set:Login.stateCode)
}

bool Login::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
void Login::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
Login::V1Case Login::v1_case() const {
  return Login::V1Case(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Registration::kLoginFieldNumber;
const int Registration::kHashFieldNumber;
const int Registration::kMailFieldNumber;
const int Registration::kCaptchaFieldNumber;
const int Registration::kPublicKeyFieldNumber;
const int Registration::kStateCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Registration::Registration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Registration)
}

void Registration::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Registration_default_oneof_instance_->statecode_ = 0;
}

Registration::Registration(const Registration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Registration)
}

void Registration::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1();
}

Registration::~Registration() {
  // @@protoc_insertion_point(destructor:Registration)
  SharedDtor();
}

void Registration::SharedDtor() {
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_v1()) {
    clear_v1();
  }
  if (this != default_instance_) {
  }
}

void Registration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Registration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Registration_descriptor_;
}

const Registration& Registration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegLogModels_2eproto();
  return *default_instance_;
}

Registration* Registration::default_instance_ = NULL;

Registration* Registration::New(::google::protobuf::Arena* arena) const {
  Registration* n = new Registration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Registration::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:Registration)
  switch(v1_case()) {
    case kStateCode: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V1_NOT_SET;
}


void Registration::Clear() {
// @@protoc_insertion_point(message_clear_start:Registration)
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_v1();
}

bool Registration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Registration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Registration.login"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional string hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Registration.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mail;
        break;
      }

      // optional string mail = 3;
      case 3: {
        if (tag == 26) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mail().data(), this->mail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Registration.mail"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_captcha;
        break;
      }

      // optional string captcha = 4;
      case 4: {
        if (tag == 34) {
         parse_captcha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captcha()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->captcha().data(), this->captcha().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Registration.captcha"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_publicKey;
        break;
      }

      // optional string publicKey = 5;
      case 5: {
        if (tag == 42) {
         parse_publicKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Registration.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stateCode;
        break;
      }

      // optional int32 stateCode = 6;
      case 6: {
        if (tag == 48) {
         parse_stateCode:
          clear_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v1_.statecode_)));
          set_has_statecode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Registration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Registration)
  return false;
#undef DO_
}

void Registration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Registration)
  // optional string login = 1;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // optional string mail = 3;
  if (this->mail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mail(), output);
  }

  // optional string captcha = 4;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), this->captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.captcha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->captcha(), output);
  }

  // optional string publicKey = 5;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->publickey(), output);
  }

  // optional int32 stateCode = 6;
  if (has_statecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->statecode(), output);
  }

  // @@protoc_insertion_point(serialize_end:Registration)
}

::google::protobuf::uint8* Registration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Registration)
  // optional string login = 1;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // optional string mail = 3;
  if (this->mail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mail().data(), this->mail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mail(), target);
  }

  // optional string captcha = 4;
  if (this->captcha().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->captcha().data(), this->captcha().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.captcha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->captcha(), target);
  }

  // optional string publicKey = 5;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Registration.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->publickey(), target);
  }

  // optional int32 stateCode = 6;
  if (has_statecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->statecode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Registration)
  return target;
}

int Registration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Registration)
  int total_size = 0;

  // optional string login = 1;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login());
  }

  // optional string hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional string mail = 3;
  if (this->mail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mail());
  }

  // optional string captcha = 4;
  if (this->captcha().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->captcha());
  }

  // optional string publicKey = 5;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  switch (v1_case()) {
    // optional int32 stateCode = 6;
    case kStateCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Registration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Registration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Registration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Registration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Registration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Registration)
    MergeFrom(*source);
  }
}

void Registration::MergeFrom(const Registration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Registration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.v1_case()) {
    case kStateCode: {
      set_statecode(from.statecode());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.mail().size() > 0) {

    mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_);
  }
  if (from.captcha().size() > 0) {

    captcha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captcha_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void Registration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Registration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Registration::CopyFrom(const Registration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Registration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registration::IsInitialized() const {

  return true;
}

void Registration::Swap(Registration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Registration::InternalSwap(Registration* other) {
  login_.Swap(&other->login_);
  hash_.Swap(&other->hash_);
  mail_.Swap(&other->mail_);
  captcha_.Swap(&other->captcha_);
  publickey_.Swap(&other->publickey_);
  std::swap(v1_, other->v1_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Registration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Registration_descriptor_;
  metadata.reflection = Registration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Registration

// optional string login = 1;
void Registration::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Registration::login() const {
  // @@protoc_insertion_point(field_get:Registration.login)
  return login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Registration.login)
}
 void Registration::set_login(const char* value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Registration.login)
}
 void Registration::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Registration.login)
}
 ::std::string* Registration::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:Registration.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Registration::release_login() {
  // @@protoc_insertion_point(field_release:Registration.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:Registration.login)
}

// optional string hash = 2;
void Registration::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Registration::hash() const {
  // @@protoc_insertion_point(field_get:Registration.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Registration.hash)
}
 void Registration::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Registration.hash)
}
 void Registration::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Registration.hash)
}
 ::std::string* Registration::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:Registration.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Registration::release_hash() {
  // @@protoc_insertion_point(field_release:Registration.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Registration.hash)
}

// optional string mail = 3;
void Registration::clear_mail() {
  mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Registration::mail() const {
  // @@protoc_insertion_point(field_get:Registration.mail)
  return mail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_mail(const ::std::string& value) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Registration.mail)
}
 void Registration::set_mail(const char* value) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Registration.mail)
}
 void Registration::set_mail(const char* value, size_t size) {
  
  mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Registration.mail)
}
 ::std::string* Registration::mutable_mail() {
  
  // @@protoc_insertion_point(field_mutable:Registration.mail)
  return mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Registration::release_mail() {
  // @@protoc_insertion_point(field_release:Registration.mail)
  
  return mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    
  } else {
    
  }
  mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail);
  // @@protoc_insertion_point(field_set_allocated:Registration.mail)
}

// optional string captcha = 4;
void Registration::clear_captcha() {
  captcha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Registration::captcha() const {
  // @@protoc_insertion_point(field_get:Registration.captcha)
  return captcha_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_captcha(const ::std::string& value) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Registration.captcha)
}
 void Registration::set_captcha(const char* value) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Registration.captcha)
}
 void Registration::set_captcha(const char* value, size_t size) {
  
  captcha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Registration.captcha)
}
 ::std::string* Registration::mutable_captcha() {
  
  // @@protoc_insertion_point(field_mutable:Registration.captcha)
  return captcha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Registration::release_captcha() {
  // @@protoc_insertion_point(field_release:Registration.captcha)
  
  return captcha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_allocated_captcha(::std::string* captcha) {
  if (captcha != NULL) {
    
  } else {
    
  }
  captcha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captcha);
  // @@protoc_insertion_point(field_set_allocated:Registration.captcha)
}

// optional string publicKey = 5;
void Registration::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Registration::publickey() const {
  // @@protoc_insertion_point(field_get:Registration.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Registration.publicKey)
}
 void Registration::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Registration.publicKey)
}
 void Registration::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Registration.publicKey)
}
 ::std::string* Registration::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Registration.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Registration::release_publickey() {
  // @@protoc_insertion_point(field_release:Registration.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Registration::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Registration.publicKey)
}

// optional int32 stateCode = 6;
bool Registration::has_statecode() const {
  return v1_case() == kStateCode;
}
void Registration::set_has_statecode() {
  _oneof_case_[0] = kStateCode;
}
void Registration::clear_statecode() {
  if (has_statecode()) {
    v1_.statecode_ = 0;
    clear_has_v1();
  }
}
 ::google::protobuf::int32 Registration::statecode() const {
  // @@protoc_insertion_point(field_get:Registration.stateCode)
  if (has_statecode()) {
    return v1_.statecode_;
  }
  return 0;
}
 void Registration::set_statecode(::google::protobuf::int32 value) {
  if (!has_statecode()) {
    clear_v1();
    set_has_statecode();
  }
  v1_.statecode_ = value;
  // @@protoc_insertion_point(field_set:Registration.stateCode)
}

bool Registration::has_v1() const {
  return v1_case() != V1_NOT_SET;
}
void Registration::clear_has_v1() {
  _oneof_case_[0] = V1_NOT_SET;
}
Registration::V1Case Registration::v1_case() const {
  return Registration::V1Case(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitialState::kSessionIdFieldNumber;
const int InitialState::kLoginFieldNumber;
const int InitialState::kCreateRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitialState::InitialState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitialState)
}

void InitialState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InitialState::InitialState(const InitialState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InitialState)
}

void InitialState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitialState::~InitialState() {
  // @@protoc_insertion_point(destructor:InitialState)
  SharedDtor();
}

void InitialState::SharedDtor() {
  sessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InitialState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitialState_descriptor_;
}

const InitialState& InitialState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegLogModels_2eproto();
  return *default_instance_;
}

InitialState* InitialState::default_instance_ = NULL;

InitialState* InitialState::New(::google::protobuf::Arena* arena) const {
  InitialState* n = new InitialState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitialState::Clear() {
// @@protoc_insertion_point(message_clear_start:InitialState)
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createroom_.Clear();
}

bool InitialState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitialState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sessionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InitialState.sessionId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional string login = 2;
      case 2: {
        if (tag == 18) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InitialState.login"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_createRoom;
        break;
      }

      // repeated .CreateRoom createRoom = 3;
      case 3: {
        if (tag == 26) {
         parse_createRoom:
          DO_(input->IncrementRecursionDepth());
         parse_loop_createRoom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_createroom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_createRoom;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitialState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitialState)
  return false;
#undef DO_
}

void InitialState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitialState)
  // optional string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitialState.sessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sessionid(), output);
  }

  // optional string login = 2;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitialState.login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login(), output);
  }

  // repeated .CreateRoom createRoom = 3;
  for (unsigned int i = 0, n = this->createroom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->createroom(i), output);
  }

  // @@protoc_insertion_point(serialize_end:InitialState)
}

::google::protobuf::uint8* InitialState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitialState)
  // optional string sessionId = 1;
  if (this->sessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitialState.sessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sessionid(), target);
  }

  // optional string login = 2;
  if (this->login().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitialState.login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login(), target);
  }

  // repeated .CreateRoom createRoom = 3;
  for (unsigned int i = 0, n = this->createroom_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->createroom(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitialState)
  return target;
}

int InitialState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InitialState)
  int total_size = 0;

  // optional string sessionId = 1;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sessionid());
  }

  // optional string login = 2;
  if (this->login().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login());
  }

  // repeated .CreateRoom createRoom = 3;
  total_size += 1 * this->createroom_size();
  for (int i = 0; i < this->createroom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createroom(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitialState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InitialState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InitialState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitialState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitialState)
    MergeFrom(*source);
  }
}

void InitialState::MergeFrom(const InitialState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitialState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  createroom_.MergeFrom(from.createroom_);
  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.login().size() > 0) {

    login_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_);
  }
}

void InitialState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialState::CopyFrom(const InitialState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitialState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialState::IsInitialized() const {

  return true;
}

void InitialState::Swap(InitialState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitialState::InternalSwap(InitialState* other) {
  sessionid_.Swap(&other->sessionid_);
  login_.Swap(&other->login_);
  createroom_.UnsafeArenaSwap(&other->createroom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitialState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitialState_descriptor_;
  metadata.reflection = InitialState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitialState

// optional string sessionId = 1;
void InitialState::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitialState::sessionid() const {
  // @@protoc_insertion_point(field_get:InitialState.sessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitialState::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitialState.sessionId)
}
 void InitialState::set_sessionid(const char* value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitialState.sessionId)
}
 void InitialState::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitialState.sessionId)
}
 ::std::string* InitialState::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:InitialState.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitialState::release_sessionid() {
  // @@protoc_insertion_point(field_release:InitialState.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitialState::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:InitialState.sessionId)
}

// optional string login = 2;
void InitialState::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InitialState::login() const {
  // @@protoc_insertion_point(field_get:InitialState.login)
  return login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitialState::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitialState.login)
}
 void InitialState::set_login(const char* value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitialState.login)
}
 void InitialState::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitialState.login)
}
 ::std::string* InitialState::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:InitialState.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InitialState::release_login() {
  // @@protoc_insertion_point(field_release:InitialState.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InitialState::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:InitialState.login)
}

// repeated .CreateRoom createRoom = 3;
int InitialState::createroom_size() const {
  return createroom_.size();
}
void InitialState::clear_createroom() {
  createroom_.Clear();
}
const ::CreateRoom& InitialState::createroom(int index) const {
  // @@protoc_insertion_point(field_get:InitialState.createRoom)
  return createroom_.Get(index);
}
::CreateRoom* InitialState::mutable_createroom(int index) {
  // @@protoc_insertion_point(field_mutable:InitialState.createRoom)
  return createroom_.Mutable(index);
}
::CreateRoom* InitialState::add_createroom() {
  // @@protoc_insertion_point(field_add:InitialState.createRoom)
  return createroom_.Add();
}
::google::protobuf::RepeatedPtrField< ::CreateRoom >*
InitialState::mutable_createroom() {
  // @@protoc_insertion_point(field_mutable_list:InitialState.createRoom)
  return &createroom_;
}
const ::google::protobuf::RepeatedPtrField< ::CreateRoom >&
InitialState::createroom() const {
  // @@protoc_insertion_point(field_list:InitialState.createRoom)
  return createroom_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
