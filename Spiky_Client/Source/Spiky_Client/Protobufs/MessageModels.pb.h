// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageModels.proto

#ifndef PROTOBUF_MessageModels_2eproto__INCLUDED
#define PROTOBUF_MessageModels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "UtilityModels.pb.h"
#include "RegLogModels.pb.h"
#include "DisableWarnings.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MessageModels_2eproto();
void protobuf_AssignDesc_MessageModels_2eproto();
void protobuf_ShutdownFile_MessageModels_2eproto();

class CryptogramWrapper;
class Wrapper;

// ===================================================================

class CryptogramWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CryptogramWrapper) */ {
 public:
  CryptogramWrapper();
  virtual ~CryptogramWrapper();

  CryptogramWrapper(const CryptogramWrapper& from);

  inline CryptogramWrapper& operator=(const CryptogramWrapper& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CryptogramWrapper& default_instance();

  void Swap(CryptogramWrapper* other);

  // implements Message ----------------------------------------------

  inline CryptogramWrapper* New() const { return New(NULL); }

  CryptogramWrapper* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CryptogramWrapper& from);
  void MergeFrom(const CryptogramWrapper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CryptogramWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes registration = 1;
  void clear_registration();
  static const int kRegistrationFieldNumber = 1;
  const ::std::string& registration() const;
  void set_registration(const ::std::string& value);
  void set_registration(const char* value);
  void set_registration(const void* value, size_t size);
  ::std::string* mutable_registration();
  ::std::string* release_registration();
  void set_allocated_registration(::std::string* registration);

  // optional bytes login = 2;
  void clear_login();
  static const int kLoginFieldNumber = 2;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  void set_login(const char* value);
  void set_login(const void* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // optional bytes initialState = 3;
  void clear_initialstate();
  static const int kInitialStateFieldNumber = 3;
  const ::std::string& initialstate() const;
  void set_initialstate(const ::std::string& value);
  void set_initialstate(const char* value);
  void set_initialstate(const void* value, size_t size);
  ::std::string* mutable_initialstate();
  ::std::string* release_initialstate();
  void set_allocated_initialstate(::std::string* initialstate);

  // optional bytes room = 4;
  void clear_room();
  static const int kRoomFieldNumber = 4;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  void set_room(const char* value);
  void set_room(const void* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // optional bytes mainMenu = 5;
  void clear_mainmenu();
  static const int kMainMenuFieldNumber = 5;
  const ::std::string& mainmenu() const;
  void set_mainmenu(const ::std::string& value);
  void set_mainmenu(const char* value);
  void set_mainmenu(const void* value, size_t size);
  ::std::string* mutable_mainmenu();
  ::std::string* release_mainmenu();
  void set_allocated_mainmenu(::std::string* mainmenu);

  // optional bytes gameModels = 6;
  void clear_gamemodels();
  static const int kGameModelsFieldNumber = 6;
  const ::std::string& gamemodels() const;
  void set_gamemodels(const ::std::string& value);
  void set_gamemodels(const char* value);
  void set_gamemodels(const void* value, size_t size);
  ::std::string* mutable_gamemodels();
  ::std::string* release_gamemodels();
  void set_allocated_gamemodels(::std::string* gamemodels);

  // @@protoc_insertion_point(class_scope:CryptogramWrapper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr registration_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr initialstate_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr mainmenu_;
  ::google::protobuf::internal::ArenaStringPtr gamemodels_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageModels_2eproto();
  friend void protobuf_AssignDesc_MessageModels_2eproto();
  friend void protobuf_ShutdownFile_MessageModels_2eproto();

  void InitAsDefaultInstance();
  static CryptogramWrapper* default_instance_;
};
// -------------------------------------------------------------------

class Wrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Wrapper) */ {
 public:
  Wrapper();
  virtual ~Wrapper();

  Wrapper(const Wrapper& from);

  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wrapper& default_instance();

  void Swap(Wrapper* other);

  // implements Message ----------------------------------------------

  inline Wrapper* New() const { return New(NULL); }

  Wrapper* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wrapper& from);
  void MergeFrom(const Wrapper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Utility utility = 1;
  bool has_utility() const;
  void clear_utility();
  static const int kUtilityFieldNumber = 1;
  const ::Utility& utility() const;
  ::Utility* mutable_utility();
  ::Utility* release_utility();
  void set_allocated_utility(::Utility* utility);

  // optional .InputChecking inputChecking = 2;
  bool has_inputchecking() const;
  void clear_inputchecking();
  static const int kInputCheckingFieldNumber = 2;
  const ::InputChecking& inputchecking() const;
  ::InputChecking* mutable_inputchecking();
  ::InputChecking* release_inputchecking();
  void set_allocated_inputchecking(::InputChecking* inputchecking);

  // optional .Registration registration = 3;
  bool has_registration() const;
  void clear_registration();
  static const int kRegistrationFieldNumber = 3;
  const ::Registration& registration() const;
  ::Registration* mutable_registration();
  ::Registration* release_registration();
  void set_allocated_registration(::Registration* registration);

  // optional .Login login = 4;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 4;
  const ::Login& login() const;
  ::Login* mutable_login();
  ::Login* release_login();
  void set_allocated_login(::Login* login);

  // optional .CryptogramWrapper cryptogramWrapper = 5;
  bool has_cryptogramwrapper() const;
  void clear_cryptogramwrapper();
  static const int kCryptogramWrapperFieldNumber = 5;
  const ::CryptogramWrapper& cryptogramwrapper() const;
  ::CryptogramWrapper* mutable_cryptogramwrapper();
  ::CryptogramWrapper* release_cryptogramwrapper();
  void set_allocated_cryptogramwrapper(::CryptogramWrapper* cryptogramwrapper);

  // @@protoc_insertion_point(class_scope:Wrapper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Utility* utility_;
  ::InputChecking* inputchecking_;
  ::Registration* registration_;
  ::Login* login_;
  ::CryptogramWrapper* cryptogramwrapper_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageModels_2eproto();
  friend void protobuf_AssignDesc_MessageModels_2eproto();
  friend void protobuf_ShutdownFile_MessageModels_2eproto();

  void InitAsDefaultInstance();
  static Wrapper* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CryptogramWrapper

// optional bytes registration = 1;
inline void CryptogramWrapper::clear_registration() {
  registration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CryptogramWrapper::registration() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.registration)
  return registration_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_registration(const ::std::string& value) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.registration)
}
inline void CryptogramWrapper::set_registration(const char* value) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.registration)
}
inline void CryptogramWrapper::set_registration(const void* value, size_t size) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.registration)
}
inline ::std::string* CryptogramWrapper::mutable_registration() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.registration)
  return registration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptogramWrapper::release_registration() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.registration)
  
  return registration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_allocated_registration(::std::string* registration) {
  if (registration != NULL) {
    
  } else {
    
  }
  registration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.registration)
}

// optional bytes login = 2;
inline void CryptogramWrapper::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CryptogramWrapper::login() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.login)
  return login_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.login)
}
inline void CryptogramWrapper::set_login(const char* value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.login)
}
inline void CryptogramWrapper::set_login(const void* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.login)
}
inline ::std::string* CryptogramWrapper::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptogramWrapper::release_login() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.login)
}

// optional bytes initialState = 3;
inline void CryptogramWrapper::clear_initialstate() {
  initialstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CryptogramWrapper::initialstate() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.initialState)
  return initialstate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_initialstate(const ::std::string& value) {
  
  initialstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.initialState)
}
inline void CryptogramWrapper::set_initialstate(const char* value) {
  
  initialstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.initialState)
}
inline void CryptogramWrapper::set_initialstate(const void* value, size_t size) {
  
  initialstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.initialState)
}
inline ::std::string* CryptogramWrapper::mutable_initialstate() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.initialState)
  return initialstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptogramWrapper::release_initialstate() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.initialState)
  
  return initialstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_allocated_initialstate(::std::string* initialstate) {
  if (initialstate != NULL) {
    
  } else {
    
  }
  initialstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initialstate);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.initialState)
}

// optional bytes room = 4;
inline void CryptogramWrapper::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CryptogramWrapper::room() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.room)
  return room_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_room(const ::std::string& value) {
  
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.room)
}
inline void CryptogramWrapper::set_room(const char* value) {
  
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.room)
}
inline void CryptogramWrapper::set_room(const void* value, size_t size) {
  
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.room)
}
inline ::std::string* CryptogramWrapper::mutable_room() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptogramWrapper::release_room() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.room)
  
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    
  } else {
    
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.room)
}

// optional bytes mainMenu = 5;
inline void CryptogramWrapper::clear_mainmenu() {
  mainmenu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CryptogramWrapper::mainmenu() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.mainMenu)
  return mainmenu_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_mainmenu(const ::std::string& value) {
  
  mainmenu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.mainMenu)
}
inline void CryptogramWrapper::set_mainmenu(const char* value) {
  
  mainmenu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.mainMenu)
}
inline void CryptogramWrapper::set_mainmenu(const void* value, size_t size) {
  
  mainmenu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.mainMenu)
}
inline ::std::string* CryptogramWrapper::mutable_mainmenu() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.mainMenu)
  return mainmenu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptogramWrapper::release_mainmenu() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.mainMenu)
  
  return mainmenu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_allocated_mainmenu(::std::string* mainmenu) {
  if (mainmenu != NULL) {
    
  } else {
    
  }
  mainmenu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainmenu);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.mainMenu)
}

// optional bytes gameModels = 6;
inline void CryptogramWrapper::clear_gamemodels() {
  gamemodels_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CryptogramWrapper::gamemodels() const {
  // @@protoc_insertion_point(field_get:CryptogramWrapper.gameModels)
  return gamemodels_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_gamemodels(const ::std::string& value) {
  
  gamemodels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CryptogramWrapper.gameModels)
}
inline void CryptogramWrapper::set_gamemodels(const char* value) {
  
  gamemodels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CryptogramWrapper.gameModels)
}
inline void CryptogramWrapper::set_gamemodels(const void* value, size_t size) {
  
  gamemodels_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CryptogramWrapper.gameModels)
}
inline ::std::string* CryptogramWrapper::mutable_gamemodels() {
  
  // @@protoc_insertion_point(field_mutable:CryptogramWrapper.gameModels)
  return gamemodels_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CryptogramWrapper::release_gamemodels() {
  // @@protoc_insertion_point(field_release:CryptogramWrapper.gameModels)
  
  return gamemodels_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CryptogramWrapper::set_allocated_gamemodels(::std::string* gamemodels) {
  if (gamemodels != NULL) {
    
  } else {
    
  }
  gamemodels_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamemodels);
  // @@protoc_insertion_point(field_set_allocated:CryptogramWrapper.gameModels)
}

// -------------------------------------------------------------------

// Wrapper

// optional .Utility utility = 1;
inline bool Wrapper::has_utility() const {
  return !_is_default_instance_ && utility_ != NULL;
}
inline void Wrapper::clear_utility() {
  if (GetArenaNoVirtual() == NULL && utility_ != NULL) delete utility_;
  utility_ = NULL;
}
inline const ::Utility& Wrapper::utility() const {
  // @@protoc_insertion_point(field_get:Wrapper.utility)
  return utility_ != NULL ? *utility_ : *default_instance_->utility_;
}
inline ::Utility* Wrapper::mutable_utility() {
  
  if (utility_ == NULL) {
    utility_ = new ::Utility;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.utility)
  return utility_;
}
inline ::Utility* Wrapper::release_utility() {
  // @@protoc_insertion_point(field_release:Wrapper.utility)
  
  ::Utility* temp = utility_;
  utility_ = NULL;
  return temp;
}
inline void Wrapper::set_allocated_utility(::Utility* utility) {
  delete utility_;
  utility_ = utility;
  if (utility) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.utility)
}

// optional .InputChecking inputChecking = 2;
inline bool Wrapper::has_inputchecking() const {
  return !_is_default_instance_ && inputchecking_ != NULL;
}
inline void Wrapper::clear_inputchecking() {
  if (GetArenaNoVirtual() == NULL && inputchecking_ != NULL) delete inputchecking_;
  inputchecking_ = NULL;
}
inline const ::InputChecking& Wrapper::inputchecking() const {
  // @@protoc_insertion_point(field_get:Wrapper.inputChecking)
  return inputchecking_ != NULL ? *inputchecking_ : *default_instance_->inputchecking_;
}
inline ::InputChecking* Wrapper::mutable_inputchecking() {
  
  if (inputchecking_ == NULL) {
    inputchecking_ = new ::InputChecking;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.inputChecking)
  return inputchecking_;
}
inline ::InputChecking* Wrapper::release_inputchecking() {
  // @@protoc_insertion_point(field_release:Wrapper.inputChecking)
  
  ::InputChecking* temp = inputchecking_;
  inputchecking_ = NULL;
  return temp;
}
inline void Wrapper::set_allocated_inputchecking(::InputChecking* inputchecking) {
  delete inputchecking_;
  inputchecking_ = inputchecking;
  if (inputchecking) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.inputChecking)
}

// optional .Registration registration = 3;
inline bool Wrapper::has_registration() const {
  return !_is_default_instance_ && registration_ != NULL;
}
inline void Wrapper::clear_registration() {
  if (GetArenaNoVirtual() == NULL && registration_ != NULL) delete registration_;
  registration_ = NULL;
}
inline const ::Registration& Wrapper::registration() const {
  // @@protoc_insertion_point(field_get:Wrapper.registration)
  return registration_ != NULL ? *registration_ : *default_instance_->registration_;
}
inline ::Registration* Wrapper::mutable_registration() {
  
  if (registration_ == NULL) {
    registration_ = new ::Registration;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.registration)
  return registration_;
}
inline ::Registration* Wrapper::release_registration() {
  // @@protoc_insertion_point(field_release:Wrapper.registration)
  
  ::Registration* temp = registration_;
  registration_ = NULL;
  return temp;
}
inline void Wrapper::set_allocated_registration(::Registration* registration) {
  delete registration_;
  registration_ = registration;
  if (registration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.registration)
}

// optional .Login login = 4;
inline bool Wrapper::has_login() const {
  return !_is_default_instance_ && login_ != NULL;
}
inline void Wrapper::clear_login() {
  if (GetArenaNoVirtual() == NULL && login_ != NULL) delete login_;
  login_ = NULL;
}
inline const ::Login& Wrapper::login() const {
  // @@protoc_insertion_point(field_get:Wrapper.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::Login* Wrapper::mutable_login() {
  
  if (login_ == NULL) {
    login_ = new ::Login;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.login)
  return login_;
}
inline ::Login* Wrapper::release_login() {
  // @@protoc_insertion_point(field_release:Wrapper.login)
  
  ::Login* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Wrapper::set_allocated_login(::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.login)
}

// optional .CryptogramWrapper cryptogramWrapper = 5;
inline bool Wrapper::has_cryptogramwrapper() const {
  return !_is_default_instance_ && cryptogramwrapper_ != NULL;
}
inline void Wrapper::clear_cryptogramwrapper() {
  if (GetArenaNoVirtual() == NULL && cryptogramwrapper_ != NULL) delete cryptogramwrapper_;
  cryptogramwrapper_ = NULL;
}
inline const ::CryptogramWrapper& Wrapper::cryptogramwrapper() const {
  // @@protoc_insertion_point(field_get:Wrapper.cryptogramWrapper)
  return cryptogramwrapper_ != NULL ? *cryptogramwrapper_ : *default_instance_->cryptogramwrapper_;
}
inline ::CryptogramWrapper* Wrapper::mutable_cryptogramwrapper() {
  
  if (cryptogramwrapper_ == NULL) {
    cryptogramwrapper_ = new ::CryptogramWrapper;
  }
  // @@protoc_insertion_point(field_mutable:Wrapper.cryptogramWrapper)
  return cryptogramwrapper_;
}
inline ::CryptogramWrapper* Wrapper::release_cryptogramwrapper() {
  // @@protoc_insertion_point(field_release:Wrapper.cryptogramWrapper)
  
  ::CryptogramWrapper* temp = cryptogramwrapper_;
  cryptogramwrapper_ = NULL;
  return temp;
}
inline void Wrapper::set_allocated_cryptogramwrapper(::CryptogramWrapper* cryptogramwrapper) {
  delete cryptogramwrapper_;
  cryptogramwrapper_ = cryptogramwrapper;
  if (cryptogramwrapper) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.cryptogramWrapper)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageModels_2eproto__INCLUDED
